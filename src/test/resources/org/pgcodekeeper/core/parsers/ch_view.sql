CREATE VIEW agg_view01747 AS  SELECT   summing_table01747.some_name as some_name,   dictGet('default.dict01747', 'field1', tuple(some_name)) as field1,   dictGet('default.dict01747', 'field2', tuple(some_name)) as field2,   rates01747.rates01747 as rates01747  FROM summing_table01747  ANY LEFT JOIN rates01747   ON rates01747.from_currency = summing_table01747.currency;
create view b as (SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) js1 ANY LEFT OUTER JOIN id2 USING id2);
CREATE VIEW db_01048.v_01048 AS SELECT * FROM db_01048.t_01048_2;
CREATE VIEW dest_view (x UInt64) AS SELECT * FROM source_table;
CREATE VIEW dest_view_log (x UInt64) AS SELECT * FROM source_table_log;
CREATE VIEW dest_view_merge_tree (x UInt64) AS SELECT * FROM source_table_merge_tree;
CREATE VIEW dest_view_stripe_log (x UInt64) AS SELECT * FROM source_table_stripe_log;
CREATE VIEW dest_view_tiny_log (x UInt64) AS SELECT * FROM source_table_tiny_log;
CREATE VIEW dictionary_source_view AS   SELECT id, dictionary_source_en.value as value_en, dictionary_source_ru.value as value_ru   FROM dictionary_source_en LEFT JOIN dictionary_source_ru USING (id);
CREATE VIEW IF NOT EXISTS mv_00472 AS SELECT * FROM t_00472;
CREATE VIEW IF NOT EXISTS v_01210 AS SELECT 1;
CREATE VIEW IF NOT EXISTS view1 AS   SELECT t1.id AS id, t1.value1 AS value1, t2.value2 AS value2, t3.value3 AS value3   FROM t1   LEFT JOIN t2 ON t1.id = t2.id   LEFT JOIN t3 ON t1.id = t3.id   WHERE t1.id > 0;
CREATE VIEW IF NOT EXISTS view1 AS SELECT t1.id AS id, t1.value1 AS value1, t2.value2 AS value2, t3.value3 AS value3 FROM t1 LEFT JOIN t2 ON t1.id = t2.id LEFT JOIN t3 ON t1.id = t3.id WHERE t1.id > 0;
create view logs as select * from system.text_log where now() - toIntervalMinute(120) < event_time;
CREATE VIEW m1v AS SELECT id FROM m1;
create view my_view as select * replace arrayMap(x -> x + 1,`Object.Key`) as `Object.Key` from my_table;
CREATE VIEW null_view AS SELECT * FROM null_00481;
CREATE VIEW number_view as SELECT * FROM numbers(10) as tb;
CREATE VIEW numbers10 AS SELECT number FROM system.numbers LIMIT 10;
CREATE VIEW numbers10m AS SELECT number FROM system.numbers LIMIT 10000000;
CREATE VIEW numbers500k AS SELECT number FROM system.numbers LIMIT 500000;
create view nv_regular_mt_table AS SELECT * FROM mv_regular_mt_table;
CREATE VIEW rates01747 AS  SELECT 'USD' as from_currency, 'EUR' as to_currency, 1.2 as rates01747;
create view revenue0 as   select     l_suppkey,     sum(l_extendedprice * (1 - l_discount))   from     lineitem   where     l_shipdate >= date '1996-01-01'     and l_shipdate < date '1996-01-01' + interval '3' month   group by     l_suppkey;
CREATE VIEW sleep_view AS SELECT sleepEachRow(0.001) FROM system.numbers;
CREATE VIEW sqllt.view AS SELECT i, s FROM sqllt.table;
CREATE VIEW squares AS WITH number*2 AS square_number SELECT number, square_number FROM numbers_indexed;
create view t7 as select max(ref_3.c26) as c_2_c46_1 from t4 as ref_3;
CREATE VIEW t_v AS SELECT * FROM t;
create view tab_v as select distinct(x) from tab;
create view table_01356_view_threads as select number % 10 as g, sum(number) as s from numbers_mt(1000000) group by g;
CREATE VIEW test_00740 AS SELECT 1 AS N;
CREATE VIEW test_1602.DATABASE AS SELECT * FROM test_1602.tbl;
CREATE VIEW test_1602.DICTIONARY AS SELECT * FROM test_1602.tbl;
CREATE VIEW test_1602.TABLE AS SELECT * FROM test_1602.tbl;
CREATE VIEW test_1602.v AS SELECT * FROM test_1602.tbl;
CREATE VIEW test_1602.VIEW AS SELECT * FROM test_1602.tbl;
CREATE VIEW test_dictionary_view (   id UInt64,   value String ) AS SELECT id, value FROM test_dictionary_source_table WHERE id = (SELECT max(id) FROM test_dictionary_source_table);
CREATE VIEW test_joined_view_00740 AS SELECT *, N AS x FROM test_00740 ANY LEFT JOIN test_00740 USING N;
CREATE VIEW test_nested_view_00740 AS SELECT * FROM (SELECT * FROM test_00740);
create view test_param_view as with {param_test_val:UInt8} as param_test_val select param_test_val,    arrayCount((a)->(a < param_test_val), t.arr) as cnt1 from (select [1,2,3,4,5] as arr) t;
create view test_param_view2 as with {param_test_val:UInt8} as param_test_val select param_test_val,    arrayCount((a)->(a < param_test_val), t.arr) as cnt1,    arrayCount((a)->(a < param_test_val+1), t.arr) as cnt2 from (select [1,2,3,4,5] as arr) t;
CREATE VIEW test_view AS SELECT * FROM test;
CREATE VIEW test_view AS SELECT f1, f2 FROM test_table WHERE pk = 2;
create VIEW test_view AS WITH cte AS (SELECT date, __sign, "from", "to" FROM test_table FINAL) SELECT date, __sign, "from", "to" FROM cte;
CREATE VIEW test_view_00597 AS SELECT * FROM test_00597;
CREATE VIEW test_view_00599 AS SELECT * FROM test_00599 WHERE id = (SELECT 1);
CREATE VIEW test_view_00740 AS SELECT * FROM test_00740;
CREATE VIEW test_view_different_db AS SELECT id, value, dictGet('2025_test_db.test_dictionary', 'value', id) FROM `2025_test_db`.view_table;
CREATE VIEW TestTbl_view AS SELECT * FROM TestTbl WHERE dt = ( SELECT max(dt) FROM TestTbl );
create view testv(a String) as select number a from numbers(10);
create view testv(a UInt32) as select number a from numbers(10);
CREATE VIEW TestView AS   SELECT str, key, sumIf(a, 0) AS sum   FROM Test_00584   GROUP BY str, key   UNION ALL   SELECT str AS str, CAST('ALL' AS Enum8('A' = 0, 'B' = 1, 'ALL' = 2)) AS key, sumIf(a, 0) AS sum   FROM Test_00584   GROUP BY str;
create view union as select 1 as test union all select 2;
CREATE VIEW v (n Nullable(Int32), f Float64) AS SELECT n, f FROM t;
create view v (s LowCardinality(String), n UInt8) as select 'test' as s, toUInt8(number) as n from numbers(10000000);
create view v as (select * from f);
CREATE VIEW v1 (v UInt64) AS SELECT v FROM t1 SETTINGS additional_table_filters = {'default.t1': 's != \'s1%\''};
CREATE VIEW v1 AS SELECT 1 FROM (SELECT 1);
CREATE VIEW v2 AS SELECT number * number FROM (SELECT number FROM system.numbers LIMIT 10);
create view v4test_array_joins as SELECT * from test_array_joins where id != 10;
create view v_test1 as select id from test1_00634;
create view v_test2 as select id from test2_00634;
CREATE VIEW vcounter AS SELECT intDiv(id, 10) AS tens, max(createdAt) AS maxid FROM counter GROUP BY tens;
CREATE VIEW view AS SELECT toInt64(n) as n FROM (SELECT toString(n) as n from merge WHERE _table != 'qwerty' ORDER BY _table) UNION ALL SELECT * FROM file;
create view view1 as with t as (select number n from numbers(3)) select n from t;
CREATE VIEW view1_00270 AS SELECT number FROM system.numbers LIMIT 10;
CREATE VIEW view2_00270 AS SELECT number FROM system.numbers LIMIT 10;
CREATE VIEW view_00843 AS SELECT * FROM test1_00843;
CREATE VIEW view_bug_const AS SELECT 'World' AS hello FROM (SELECT number FROM system.numbers LIMIT 1) AS n1 JOIN (SELECT number FROM system.numbers LIMIT 1) AS n2 USING (number);
CREATE VIEW view_without_sample AS SELECT 1 AS x;
create view {CLICKHOUSE_DATABASE:Identifier}.test_view_01051_d (key UInt64, value String) as select k2 + 1 as key, v2 || '_x' as value from (select key + 2 as k2, value || '_y' as v2 from test_01051_d);
CREATE MATERIALIZED VIEW X TO Y AS SELECT 1;
create materialized view db_01517_ordinary.mv engine=Null as select * from db_01517_ordinary.source;
create materialized view db_hang.test_mv(A Int64) Engine=MergeTree order by A as select * from db_hang.test;
CREATE MATERIALIZED VIEW dest_table_mv TO dest_table as select * FROM (SELECT * FROM left_table) AS t1 INNER JOIN (WITH (SELECT DISTINCT Date FROM left_table LIMIT 1) AS dt SELECT * FROM right_table WHERE Date = dt) AS t2 USING (Date, Id);
CREATE MATERIALIZED VIEW dst2 ENGINE Memory AS SELECT x + 1 as x FROM dst1;
CREATE MATERIALIZED VIEW dst_mv Engine=Memory as select *, (SELECT count() FROM src_table) AS cnt FROM src_table;
CREATE MATERIALIZED VIEW goal_view TO goal (   `CounterID` UInt32,   `StartDate` Date,   `GoalID` UInt32,   `Visits` AggregateFunction(sumIf, Int8, UInt8),   `GoalReaches` AggregateFunction(sum, Int8) ) AS SELECT   CounterID,   StartDate,   GoalID,   sumIfState(Sign, _uniq = 1) AS Visits,   sumState(Sign) AS GoalReaches FROM visits ARRAY JOIN   GoalsID AS GoalID,   arrayEnumerateUniq(GoalsID) AS _uniq GROUP BY   CounterID,   StartDate,   GoalID ORDER BY   CounterID ASC,   StartDate ASC,   GoalID ASC;
CREATE MATERIALIZED VIEW HASH_MV (`HASH_VAL` UInt64, `STR_VAL` LowCardinality(String)) ENGINE = ReplacingMergeTree ORDER BY HASH_VAL AS SELECT xxHash64(STR_VAL) AS HASH_VAL, toLowCardinality(STR_VAL) AS STR_VAL FROM HASH_TEST_INSERT;
CREATE MATERIALIZED VIEW HASH_MV (HASH_VAL UInt64, STR_VAL LowCardinality(String)) ENGINE = ReplacingMergeTree ORDER BY HASH_VAL AS SELECT xxHash64(STR_VAL) AS HASH_VAL, toLowCardinality(STR_VAL) AS STR_VAL FROM HASH_TEST_INSERT;
CREATE MATERIALIZED VIEW IF NOT EXISTS forward TO session AS SELECT   day,   uid FROM queue;
CREATE MATERIALIZED VIEW IF NOT EXISTS mv1 TO data_b_02187 AS Select sleepEachRow(0.05) as a FROM data_a_02187;
CREATE MATERIALIZED VIEW IF NOT EXISTS mv2 TO data_b_02187 AS Select sleepEachRow(0.05) as a FROM data_a_02187;
CREATE MATERIALIZED VIEW IF NOT EXISTS mv3 TO data_b_02187 AS Select sleepEachRow(0.05) as a FROM data_a_02187;
CREATE MATERIALIZED VIEW IF NOT EXISTS mv4 TO data_b_02187 AS Select sleepEachRow(0.05) as a FROM data_a_02187;
CREATE MATERIALIZED VIEW IF NOT EXISTS mv5 TO data_b_02187 AS Select sleepEachRow(0.05) as a FROM data_a_02187;
CREATE MATERIALIZED VIEW IF NOT EXISTS mv_01210 ENGINE Log AS SELECT 1;
CREATE MATERIALIZED VIEW kekv ENGINE = MergeTree ORDER BY tuple() AS SELECT * FROM kek;
CREATE MATERIALIZED VIEW landing_to_target TO target AS   SELECT n + throwIf(n == 3333)   FROM landing;
CREATE MATERIALIZED VIEW lc_mv_00752 ENGINE = AggregatingMergeTree() ORDER BY tuple() populate AS SELECT substring(str, 1, 1) as letter, min(length(str)) AS min_len, max(length(str)) AS max_len FROM lc_00752 GROUP BY substring(str, 1, 1);
CREATE MATERIALIZED VIEW m02006 on cluster test_shard_localhost Engine = MergeTree ORDER BY tuple() AS SELECT d, 0 AS i FROM t02006 GROUP BY d, i format Null;
CREATE MATERIALIZED VIEW m1 (d Date, t DateTime, c UInt64) ENGINE = SummingMergeTree(d, (d, t), 1) AS SELECT d, toStartOfMinute(x.t) as t, count() as c FROM x GROUP BY d, t;
CREATE MATERIALIZED VIEW m3 ENGINE = SummingMergeTree(d, (d, t), 1) AS SELECT d, toStartOfHour(m1.t) as t, c FROM m1;
CREATE MATERIALIZED VIEW matview_b_to_c TO table_c AS SELECT SUM(a + sleepEachRow(0.000002)) as a FROM table_b;
CREATE MATERIALIZED VIEW matview_join_d_e TO table_f AS SELECT table_d.a as a, table_e.count + sleepEachRow(0.000003) as count FROM table_d LEFT JOIN table_e ON table_d.a = table_e.a;
CREATE MATERIALIZED VIEW mv (n Int32, n2 Int64) ENGINE = MergeTree PARTITION BY n % 10 ORDER BY n AS SELECT n, n * n AS n2 FROM src;
CREATE MATERIALIZED VIEW mv ENGINE = Null AS SELECT * FROM system.one;
CREATE MATERIALIZED VIEW mv ENGINE = ReplicatedSummingMergeTree('/clickhouse/' || currentDatabase() || '/mv/{shard}/', '{replica}') PARTITION BY toYYYYMMDD(hour) ORDER BY hour AS SELECT   toStartOfHour(time) AS hour,   sum(number) AS sum_amount FROM landing GROUP BY hour;
-- create materialized view mv engine=Memory empty as select 1; -- Experimental
CREATE MATERIALIZED VIEW mv TO ds AS SELECT   pk1,   pk2,   pk4,   pk3,   countState() AS occurences FROM landing GROUP BY pk1, pk2, pk4, pk3;
CREATE MATERIALIZED VIEW mv TO dst (n String) AS SELECT * FROM src;
CREATE MATERIALIZED VIEW mv TO dst AS SELECT x FROM src;
CREATE MATERIALIZED VIEW mv TO mv_target AS SELECT * FROM mv_source;
CREATE MATERIALIZED VIEW mv TO output AS SELECT key, dictGetUInt64('dict_in_01023.dict', 'val', key) val FROM dist_out;
CREATE MATERIALIZED VIEW mv TO test1 (b String, a UInt8) AS SELECT d AS b, c AS a FROM test2;
create materialized view mv to to_table as select * from from_table;
CREATE MATERIALIZED VIEW mv1 (`s` String,`x` String DEFAULT 'b') ENGINE = MergeTree PARTITION BY tuple() ORDER BY s AS SELECT concat(tuple(*).1, 'mv1') AS s FROM src;
create materialized view mv1 to dst as select * from src;
CREATE MATERIALIZED VIEW mv1 TO test1 AS SELECT a FROM test2;
CREATE MATERIALIZED VIEW mv1_00726 ENGINE = Memory AS SELECT x FROM src_00726 WHERE x % 2 = 0;
CREATE MATERIALIZED VIEW mv1_01361 TO t2_01361 AS SELECT * FROM (SELECT * FROM t1_01361);
CREATE MATERIALIZED VIEW mv2 TO dst (s String, x String DEFAULT 'd') AS SELECT concat(tuple(*).1, 'mv2') AS s FROM src;
create materialized view mv2 to dst as select * from src;
CREATE MATERIALIZED VIEW mv2 TO test2 AS SELECT a FROM test1;
CREATE MATERIALIZED VIEW mv2_00726 ENGINE = Memory AS SELECT x FROM src_00726 WHERE x % 2 = 1;
CREATE MATERIALIZED VIEW mv_00180 ENGINE = Null AS SELECT * FROM t_00180;
CREATE MATERIALIZED VIEW mv_00508 TO dst AS SELECT * FROM src;
CREATE MATERIALIZED VIEW mv_00610(d Date, y UInt64) ENGINE MergeTree(d, y, 8192) AS SELECT d, x + 1 AS y FROM tab_00610;
create materialized view mv_01277_2 to buffer_01277 as select a1, a2, k1, k2, b1, b2, c from in_01277;
create materialized view mv_02146 engine=MergeTree() order by number as select * from numbers(10);
CREATE MATERIALIZED VIEW mv_02366 TO consumer_02366 AS SELECT   id,   argMinState(dec, id) AS dec FROM (   SELECT     id,     toDecimal128(dec, 10) AS dec   FROM producer_02366 ) GROUP BY id;
create materialized view mv_02572 to copy_02572 as select * from data_02572;
CREATE MATERIALIZED VIEW mv_a to dest_a AS SELECT   count() AS count,   min(a) AS min,   max(a) AS max,   (SELECT count() FROM source_null) AS count_subquery,   (SELECT min(a) FROM source_null) AS min_subquery,   (SELECT max(a) FROM source_null) AS max_subquery FROM source_null GROUP BY count_subquery, min_subquery, max_subquery;
create MATERIALIZED VIEW mv_bad (x String) ENGINE = MergeTree Partition by tuple() order by tuple() AS SELECT DISTINCT x FROM test_00687;
CREATE MATERIALIZED VIEW mv_checkouts2target TO target_table AS  SELECT   id,   maxState( toDateTime(0, 'UTC') ) as latest_login_time,   maxState( ts ) as latest_checkout_time,   if(max(current_latest_login_time) > 0, minState( toUInt64(ts - current_latest_login_time)), minState( toUInt64(-1) ) ) as fastest_session,   maxState( toUInt64(0) ) as biggest_inactivity_period  FROM checkouts  LEFT JOIN (SELECT id, maxMerge(latest_login_time) as current_latest_login_time FROM target_table WHERE id IN (SELECT id FROM checkouts) GROUP BY id) USING (id)  GROUP BY id;
create MATERIALIZED VIEW mv_good (x String) ENGINE = MergeTree Partition by tuple() order by tuple() AS SELECT x FROM test_00687;
create MATERIALIZED VIEW mv_group (x String) ENGINE = MergeTree Partition by tuple() order by tuple() AS SELECT x FROM test_00687 group by x;
CREATE MATERIALIZED VIEW mv_null TO source_null AS SELECT * FROM source;
create materialized view mv_table to table_2 (x UInt32, y String) as select * from table_1;
CREATE MATERIALIZED VIEW mv_to_join TO `destination_join` AS SELECT concat(id, '_', color) AS key, * FROM main;
CREATE MATERIALIZED VIEW mv_to_set TO `destination_set` AS SELECT key FROM destination_join;
create materialized view mv_traffic_by_tadig15min Engine=AggregatingMergeTree partition by tadig order by (ts,tadig) populate as select toStartOfFifteenMinutes(timestamp) ts,toDayOfWeek(timestamp) dow, tadig, sumState(acctinputoctets+acctoutputoctets) traffic_bytes,maxState(timestamp) last_stop, minState(radacctid) min_radacctid,maxState(radacctid) max_radacctid from radacct where acctstatustype='Stop' and acctinputoctets+acctoutputoctets > 0 group by tadig,ts,dow;
CREATE MATERIALIZED VIEW mview TO mview_backend AS SELECT n, n * n AS "n2" FROM test_table;
CREATE MATERIALIZED VIEW null_mv Engine = Log AS SELECT * FROM null_table LEFT JOIN number_view as tb USING number;
CREATE MATERIALIZED VIEW original_mv TO dst AS SELECT * FROM src;
CREATE MATERIALIZED VIEW parse_mv_eph TO parsed_eph AS SELECT  name,  toUInt32(num) as num_ephemeral FROM raw;
CREATE MATERIALIZED VIEW pipe TO dest AS SELECT v FROM src;
CREATE MATERIALIZED VIEW pipe_01019 TO dest_01019 AS SELECT v FROM src_01019;
create materialized view push_to_logs_proxy_mv_02572 to log_proxy_02572 as select * from system.query_log;
CREATE MATERIALIZED VIEW regression_for_in_operator_view ENGINE=AggregatingMergeTree(d, (d,g), 8192) AS SELECT d, g, maxState(v) FROM regression_for_in_operator GROUP BY d, g;
CREATE MATERIALIZED VIEW segfault_mv   ENGINE = AggregatingMergeTree()   ORDER BY (id) AS SELECT   id,   uniqState(uuid) as uniq_uuids,   uniqMapState(CAST((tags_ids, arrayMap(_ -> toString(uuid), tags_ids)), 'Map(UInt32, String)')) as uniq_tags_ids FROM segfault GROUP BY id;
CREATE MATERIALIZED VIEW source_to_target to mv_target as Select * from mv_source where a not in (Select sleepEachRow(0.1) from numbers(50));
CREATE MATERIALIZED VIEW src2dst_false TO dst AS SELECT   id,   src.value - deltas_sum as delta FROM src LEFT JOIN (   SELECT id, sum(delta) as deltas_sum FROM dst   WHERE id IN (SELECT id FROM src WHERE not sleepEachRow(0.001))   GROUP BY id ) _a USING (id);
CREATE MATERIALIZED VIEW src2dst_true TO dst AS SELECT    id,    src.value - deltas_sum as delta FROM src LEFT JOIN (   SELECT id, sum(delta) as deltas_sum FROM dst   WHERE id IN (SELECT id FROM src WHERE not sleepEachRow(0.001))   GROUP BY id ) _a USING (id);
CREATE MATERIALIZED VIEW src_to_dst1 TO dst1 AS SELECT x + 1 as x FROM src;
create materialized view summing_merge_tree_aggregate_function (   d Date,   k UInt64,   c UInt64,   u AggregateFunction(uniq, UInt64) ) engine=SummingMergeTree(d, k, 8192) as select d, k, sum(c) as c, uniqState(u) as u from summing_merge_tree_null group by d, k;
create materialized view summing_merge_tree_aggregate_function (   d Date,   k UInt64,   c UInt64,   un AggregateFunction(uniq, UInt64),   ut AggregateFunction(uniqTheta, UInt64) ) engine=SummingMergeTree(d, k, 8192) as select d, k, sum(c) as c, uniqState(u) as un, uniqThetaState(u) as ut from summing_merge_tree_null group by d, k;
create materialized view t_mv engine = MergeTree order by tuple() as select uniq(x), bitAnd(x, 255) as y from t group by y;
create materialized view t_mv Engine = Null AS select now() as ts, max(a) from t group by ts;
CREATE MATERIALIZED VIEW t_mv_00751 ENGINE = MergeTree ORDER BY date   AS SELECT date, platform, app FROM t_00751   WHERE app = (SELECT min(app) from u_00751) AND platform = (SELECT (SELECT min(platform) from v_00751));
CREATE MATERIALIZED VIEW t_v ENGINE = MergeTree() ORDER BY tuple() AS SELECT A FROM t LEFT JOIN ( SELECT toInt64(dummy) AS A FROM system.one ) js2 USING (A);
CREATE MATERIALIZED VIEW table_view ENGINE = MergeTree(date, (date, zoneId), 8192) AS SELECT  date,  zoneId,  test1,  test2,  test3 FROM source_table;
CREATE MATERIALIZED VIEW test_1602.vv (`EventDate` DateTime, `CounterID` UInt32, `UserID` UInt32) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SETTINGS index_granularity = 8192 AS SELECT * FROM test_1602.tbl;
CREATE MATERIALIZED VIEW test_materialized_00571 ENGINE = MergeTree(date, (platform, app), 8192) POPULATE AS SELECT date, platform, app FROM (SELECT * FROM test_00571);
CREATE MATERIALIZED VIEW test_materialized_view (   id UInt64,   value String ) ENGINE=MergeTree ORDER BY id AS SELECT id, value FROM test_table;
CREATE MATERIALIZED VIEW test_mv ENGINE=MergeTree ORDER BY arr AS WITH (SELECT '\d[a-z]') AS constant_value SELECT extractAll(concat(toString(number), 'a'), assumeNotNull(constant_value)) AS arr FROM test_table;
CREATE MATERIALIZED VIEW test_mv ENGINE=MergeTree ORDER BY arr AS WITH (SELECT regex FROM regex_test_table) AS constant_value SELECT extractAll(concat(toString(number), 'a'), assumeNotNull(constant_value)) AS arr FROM test_table;
CREATE MATERIALIZED VIEW test_mv to test(`id` Int32, `pv` AggregateFunction(sum, Int32)) as SELECT id, sumState(1) as pv from test_input group by id;
create MATERIALIZED VIEW test_mv to test(`id` Int32, `pv` AggregateFunction(sum, Int32)) as SELECT id, sumState(toInt32(1)) as pv from test_input group by id;
CREATE MATERIALIZED VIEW test_mv TO test2 AS SELECT toUInt64(a = 'test') FROM test1;
CREATE MATERIALIZED VIEW test_mv TO test_table (number UInt64, value Decimal(38, 6)) AS SELECT number, sum(number) AS value FROM (SELECT *, toDecimal64(number, 6) AS val FROM numbers) GROUP BY number;
create materialized view test_mv_00609 uuid '00000609-1000-4000-8000-000000000001' Engine=MergeTree(date, (a), 8192) populate as select a, toDate('2000-01-01') date from test_00609;
CREATE MATERIALIZED VIEW test_mv_a Engine=ReplicatedMergeTree ('/clickhouse/tables/{database}/test_02124/{table}', '1') order by tuple() AS SELECT test, A, count() c FROM test group by test, A;
CREATE MATERIALIZED VIEW test_mv_b Engine=ReplicatedMergeTree ('/clickhouse/tables/{database}/test_02124/{table}', '1') partition by A order by tuple() AS SELECT test, A, count() c FROM test group by test, A;
CREATE MATERIALIZED VIEW test_mv_c Engine=ReplicatedMergeTree ('/clickhouse/tables/{database}/test_02124/{table}', '1') order by tuple() AS SELECT test, A, count() c FROM test group by test, A;
CREATE MATERIALIZED VIEW test_view (Rows UInt64, MaxHitTime DateTime('America/Los_Angeles')) AS SELECT count() AS Rows, max(UTCEventTime) AS MaxHitTime FROM test_table;
CREATE MATERIALIZED VIEW test_view (Rows UInt64, MaxHitTime DateTime('America/Los_Angeles')) ENGINE = Memory AS SELECT count() AS Rows, max(UTCEventTime) AS MaxHitTime FROM test_table;
CREATE MATERIALIZED VIEW test_view_filtered (EventDate Date, CounterID UInt32) ENGINE = Memory POPULATE AS SELECT CounterID, EventDate FROM test_table WHERE EventDate < '2013-01-01';
CREATE MATERIALIZED VIEW test_view_filtered (EventDate Date, CounterID UInt32) POPULATE AS SELECT CounterID, EventDate FROM test_table WHERE EventDate < '2013-01-01';
CREATE MATERIALIZED VIEW test_view_tb ENGINE = MergeTree() ORDER BY a AS SELECT * FROM test_tb;
CREATE MATERIALIZED VIEW tmp_mv ENGINE = AggregatingMergeTree(date, (date, name), 8192) AS SELECT date, name, countState() AS cc FROM tmp GROUP BY date, name;
CREATE MATERIALIZED VIEW tmp_mv4 ENGINE = AggregatingMergeTree(date, date, 8192) POPULATE AS SELECT DISTINCT * FROM tmp_mv;
CREATE MATERIALIZED VIEW truncate_test_materialized_view ENGINE = MergeTree(p, k, 1) AS SELECT * FROM truncate_test_materialized_depend;
create materialized view tt_mv to tt as select p, minState(now() - interval 30 minute) as tmin from tt_null group by p;
CREATE MATERIALIZED VIEW v to v AS SELECT c FROM t;
CREATE MATERIALIZED VIEW v1 to t1 AS SELECT * FROM t2;
CREATE MATERIALIZED VIEW v2 to t2 AS SELECT * FROM t1;
create MATERIALIZED view view_foo_bar ENGINE = ReplacingMergeTree(ddate, (bar_id), 8192) as select ddate, bar_id, bar_n, foo_id, foo_n from (select ddate, id as bar_id, n as bar_n, foo_id from bar) js1 any left join (select id as foo_id, n as foo_n from foo) js2 using foo_id;
CREATE MATERIALIZED VIEW view_table_00942 Engine = Memory AS SELECT * FROM src_00942;
CREATE MATERIALIZED VIEW with_deduplication_mv UUID '00000510-1000-4000-8000-000000000001'   ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{database}/test_00510/with_deduplication_mv', 'r1') ORDER BY dummy   AS SELECT 0 AS dummy, countState(x) AS cnt FROM with_deduplication;
CREATE MATERIALIZED VIEW without_deduplication_mv UUID '00000510-1000-4000-8000-000000000002'   ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{database}/test_00510/without_deduplication_mv', 'r1') ORDER BY dummy   AS SELECT 0 AS dummy, countState(x) AS cnt FROM without_deduplication;
create materialized view {CLICKHOUSE_DATABASE:Identifier}.my_materialized_view ENGINE = MergeTree(day, (day), 8192) as select * from {CLICKHOUSE_DATABASE:Identifier}.my_table;
CREATE MATERIALIZED VIEW {CLICKHOUSE_DATABASE:Identifier}.test_materialized ENGINE = Log AS SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_log;
CREATE OR REPLACE VIEW t (number UInt64) AS SELECT number FROM system.numbers;
CREATE OR REPLACE VIEW t AS SELECT number+1 AS next_number FROM system.numbers;
CREATE OR REPLACE VIEW view_no_nulls AS SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1 FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2 USING a ORDER BY a;
CREATE OR REPLACE VIEW view_no_nulls_set AS SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1 FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2 USING a ORDER BY a SETTINGS join_use_nulls = 0;
CREATE OR REPLACE VIEW view_nulls AS SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1 FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2 USING a ORDER BY a;
CREATE OR REPLACE VIEW view_nulls_set AS SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1 FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2 USING a ORDER BY a SETTINGS join_use_nulls = 1;

DROP VIEW db_01048.v_01048;
drop view dst_mv;
DROP VIEW IF EXISTS `02501_view`;
drop view if exists agg_view01747;
DROP VIEW IF EXISTS dst_mv;
DROP VIEW IF EXISTS v_01210;
drop view mv;
DROP VIEW mv_01210;
drop view my_view;
DROP VIEW parse_mv_eph;
DROP VIEW v_01210;

ATTACH MATERIALIZED VIEW mv UUID '3bd68e3c-2693-4352-ad66-a66eba9e345e' TO INNER UUID '3bd68e3c-2693-4352-ad66-a66eba9e345e' (n Int32, n2 Int64) ENGINE = MergeTree PARTITION BY n % 10 ORDER BY n AS SELECT n, n * n AS n2 FROM src;
ATTACH MATERIALIZED VIEW mv UUID 'e15f3ab5-6cae-4df3-b879-f40deafd82c2' (n Int32, n2 Int64) ENGINE = MergeTree PARTITION BY n % 10 ORDER BY n AS SELECT n, n * n AS n2 FROM src;
ATTACH MATERIALIZED VIEW mv UUID 'e15f3ab5-6cae-4df3-b879-f40deafd82c2' TO INNER UUID '3bd68e3c-2693-4352-ad66-a66eba9e345e' (n Int32, n2 Int64) ENGINE = MergeTree PARTITION BY n % 10 ORDER BY n AS SELECT n, n * n AS n2 FROM src;