SELECT 0.5 IN ( SELECT singleValueOrNull(*) FROM ( SELECT 1048577 FROM numbers(0) ) WITH TOTALS ), NULL, NULL NOT IN ( SELECT 2147483647, 1024 IN ( SELECT [NULL, 2147483648, NULL, NULL], number FROM numbers(7, 100) ), [NULL, NULL, NULL, NULL, NULL], number FROM numbers(1048576) WHERE NULL ), NULL NOT IN ( SELECT number FROM numbers(0) ) GROUP BY NULL WITH CUBE;
select c_7_c4585_14 as c_4_c4593_5 from (select avg(0) as c_7_c4572_1, max(-0) as c_7_c4585_14 from t7 as ref_0 group by ref_0.c_2_c46_1) as subq_0 where c_4_c4593_5 <= multiIf(true, 1, exp10(c_4_c4593_5) <= 1, 1, 1);
SELECT ifNotFinite(quantilesTimingMerge(0.95)(q)[1],0) as d1, ifNotFinite(quantilesTimingMerge(0.99)(q)[1],0) as d2, ifNotFinite(quantilesTimingMerge(0.50)(q)[1],0) as d3, sum(s) FROM cluster('test_cluster_two_shards', currentDatabase(), r) WHERE a = 'x' settings prefer_localhost_replica=0;
-- select r from (select [('y',0),('n',1)] as cg, if( arrayMap( x -> x.1, cg ) != ['y', 'n'], 'y', 'n') as so, arrayFilter( x -> x.1 = so , cg) as r );
select case 1 when 1 then 'a' else 'b' end value;
select case 1 when 1 then 'a' end value;
SELECT id, maxMerge(latest_login_time) as current_latest_login_time, maxMerge(latest_checkout_time) as current_latest_checkout_time, minMerge(fastest_session) as current_fastest_session, maxMerge(biggest_inactivity_period) as current_biggest_inactivity_period FROM target_table where id in (1,2) GROUP BY id ORDER BY id;
SELECT sum(a)*100/sum(sum(a)) OVER (PARTITION BY b) AS r FROM ( SELECT 1 AS a, 2 AS b UNION ALL SELECT 3 AS a, 4 AS b UNION ALL SELECT 5 AS a, 2 AS b ) AS t GROUP BY b;
SELECT tupleElement(tuple, 'k1', 0) fine_k1_with_0, tupleElement(tuple, 'k1', NULL) k1_with_null, tupleElement(tuple, 'k2', 0) k2_with_0, tupleElement(tuple, 'k2', NULL) k2_with_null FROM test_tuple_element;
SELECT 'hours' AS maximum_unit, arrayJoin([1, 60, 60*60, 60*60*24, 60*60*24*30, 60*60*24*365]) AS elapsed, formatReadableTimeDelta(elapsed*5.5, maximum_unit) AS time_delta;
SELECT 'limit w/ GROUP BY', count(), number FROM remote('127.{1,2}', view( SELECT intDiv(number, 2) AS number FROM numbers(10) )) GROUP BY number ORDER BY count() ASC, number DESC SETTINGS limit=2;
SELECT 'metric' || toString(number) AS name, number AS value, if(number % 2 == 0, 'info ' || toString(number), NULL) AS help, if(number % 3 == 0, 'counter', NULL) AS type, if(number == 2, 1395066363000, NULL) AS timestamp FROM numbers(5) FORMAT Prometheus;
SELECT 'months' AS maximum_unit, arrayJoin([1, 60, 60*60, 60*60*24, 60*60*24*30, 60*60*24*365]) AS elapsed, formatReadableTimeDelta(elapsed*5.5, maximum_unit) AS time_delta;
SELECT 'Nul\0able\0String)Nul\0\0ble(String)Nul\0able(String)Nul\0able(String)', NULL AND 2, '', number, NULL AS k FROM ( SELECT materialize(NULL) OR materialize(-9223372036854775808), number FROM system.numbers LIMIT 1000000 ) ORDER BY k ASC, number ASC, k ASC LIMIT 1023, 1023 SETTINGS max_bytes_before_external_sort = 1000000 FORMAT Null;
SELECT 'processed' AS type, max(number) AS max_date, min(number) AS min_date FROM numbers(100) GROUP BY type;
SELECT 'serialized state is not used', sequenceMatch('(?1)(?2)')(time, number_ = 1, number_ = 0) AS seq FROM ( SELECT number AS time, number % 2 AS number_ FROM numbers_mt(100) );
SELECT '{"a":"1","b":"2","c":"","d":"4"}' AS json, extractAll(json, '"([^"]*)":') AS keys, extractAll(json, ':"([^"]*)"') AS values;
SELECT 'ё' AS norm, 'ё' AS denorm, length(norm), length(denorm), normalizeUTF8NFC(norm) AS norm_nfc, normalizeUTF8NFC(denorm) AS denorm_nfc, length(norm_nfc), length(denorm_nfc);
SELECT (1, 'World') = (1, 'Hello'), (1, 'World') != (1, 'Hello'), (1, 'World') < (1, 'Hello'), (1, 'World') > (1, 'Hello'), (1, 'World') <= (1, 'Hello'), (1, 'World') >= (1, 'Hello');
SELECT (1, 'World', 23) = (1, 'Hello', 23), (1, 'World', 23) != (1, 'Hello', 23), (1, 'World', 23) < (1, 'Hello', 23), (1, 'World', 23) > (1, 'Hello', 23), (1, 'World', 23) <= (1, 'Hello', 23), (1, 'World', 23) >= (1, 'Hello', 23);
SELECT (number, 'key'), dictHas('complex_key_dictionary', (number, 'key')), dictGetOrNull('complex_key_dictionary', 'value', (number, 'key')), dictGetOrNull('complex_key_dictionary', 'value_nullable', (number, 'key')), dictGetOrNull('complex_key_dictionary', ('value', 'value_nullable'), (number, 'key')) FROM system.numbers LIMIT 5;
SELECT (SELECT hex(argMaxState('', number)) FROM numbers(1)) = state FROM argmaxstate_hex_empty WHERE v = '22.8.5.29';
SELECT (SELECT hex(argMaxState('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', number)) FROM numbers(1)) = state FROM argmaxstate_hex_large WHERE v = '22.8.5.29';
SELECT * FROM ( SELECT column1 FROM table1 GROUP BY column1 ) AS a ANY LEFT JOIN ( SELECT * FROM table2 ) AS b ON (b.column1 = a.column1) AND (b.column2 = a.column2) ANY LEFT JOIN ( SELECT * FROM table3 ) AS c ON c.column3 = b.column3;
SELECT * FROM t1 AS t1 INNER JOIN t2 AS t2 ON t1.a1 = t2.b1 INNER JOIN t3 AS t3 ON t1.a1 = t3.c1;
SELECT *, if((number % 2) = 0, 0.5, 1) AS a, 30 AS b, sum(a * b) OVER (ORDER BY number ASC) AS s FROM numbers(10);
SELECT *, if(number = 1, 1, 0) as a, max(a) OVER (ORDER BY number ASC) AS s FROM numbers(10);
SELECT -1 IN (-1), -1 IN (1, -1, 2), 1.0 IN (1), 1.1 IN (1, -1), 1.0 IN (3, 1., -1), 1 IN (3, 2, 1), toInt16(-1) IN (255), materialize(-1) IN (-1), materialize(-1) IN (1, -1, 2), materialize(1.0) IN (1), materialize(1.1) IN (1, -1), materialize(1.0) IN (3, 1., -1), materialize(1) IN (3, 2, 1), materialize(toInt16(-1)) IN (255);
SELECT 0 AND NULL, 1 AND NULL, toNullable(0) AND NULL, toNullable(1) AND NULL, 0.0 AND NULL, 0.1 AND NULL, NULL AND 1 AND NULL, 0 AND NULL AND 1 AND NULL;
SELECT 0 OR NULL, 1 OR NULL, toNullable(0) OR NULL, toNullable(1) OR NULL, 0.0 OR NULL, 0.1 OR NULL, NULL OR 1 OR NULL, 0 OR NULL OR 1 OR NULL;
SELECT 1 AS max_size, groupArray(max_size)(col) FROM (SELECT col FROM ( SELECT 1 AS col UNION ALL SELECT 2 ) ORDER BY col);
SELECT 1 IN (1, -1, 2.0, 2.5), 1.0 IN (1, -1, 2.0, 2.5), 1 IN (1.0, -1, 2.0, 2.5), 1.0 IN (1.0, -1, 2.0, 2.5), 1 IN (1.1, -1, 2.0, 2.5), -1 IN (1, -1, 2.0, 2.5);
SELECT 1, 'a', [1, 2, 3], (1, 'a'), null, nan FORMAT JSONCompactStrings;
SELECT 1000 AS a, arrayMap(a -> (a + 1), [1, 2, 3]), a + 10 as c;
SELECT 1023 + l, * FROM ( SELECT toLowCardinality(toNullable(number)) AS l FROM system.numbers LIMIT 10 ) AS s1 ANY LEFT JOIN ( SELECT toLowCardinality(toNullable(number)) AS r FROM system.numbers LIMIT 7 ) AS s2 ON (l + 1023) = (r * 3) ORDER BY l, r;
SELECT 2 AS x, arrayJoin([NULL, NULL, NULL]) GROUP BY GROUPING SETS ( (0), ([NULL, NULL, NULL])) ORDER BY x ASC WITH FILL FROM 1 TO 10;
SELECT [1, 2, 3, 1, 3] AS a, indexOf(arrayReverse(arraySlice(a, 1, -1)), 3) AS offset_from_right, arraySlice(a, multiIf(offset_from_right = 0, 1, (length(a) - offset_from_right) + 1));
SELECT [1] < [1000], ['abc'] = [NULL], ['abc'] = [toNullable('abc')], [[]] = [[]], [[], [1]] > [[], []], [[1]] < [[], []], [[], []] > [[]], [([], ([], []))] < [([], ([], ['hello']))] ;
SELECT `1a`, `2b` FROM t1 AS tt1 INNER JOIN ( SELECT `3c` FROM t2 ) AS tt2 ON tt1.`1a` = tt2.`3c` INNER JOIN ( SELECT `6f` FROM t3 ) AS tt3 ON tt1.`2b` = tt3.`6f`;
SELECT `日期`, location.name, store.`状态` FROM sales LEFT JOIN store ON store.id = `店铺` LEFT JOIN location ON location.id = `地址` ORDER BY 1, 2, 3;
SELECT a, b FROM t1 AS tt1 INNER JOIN ( SELECT c FROM t2 ) AS tt2 ON tt1.a = tt2.c INNER JOIN ( SELECT f FROM t3 ) AS tt3 ON tt1.b = tt3.f;
SELECT a, count() FROM remote('127.0.0.{1,2}', currentDatabase(), local_t) GROUP BY a WITH TOTALS HAVING a IN ( SELECT 1 );
SELECT APIKey, ConversionEventValue FROM left_table AS left_table ALL INNER JOIN ( SELECT * FROM ( SELECT APIKey, EventValueForPostback AS ConversionEventValue FROM right_table AS right_table ) ALL INNER JOIN ( SELECT APIKey FROM left_table as left_table GROUP BY APIKey ) USING (APIKey) ) USING (APIKey);
SELECT argMax(col1, timestamp) AS col1, col1 / 10 AS final_col, final_col + 1 AS final_col2 FROM ttttttt GROUP BY col3;
SELECT argMax(id, timestamp), argMaxOrNull(id, timestamp) FROM ( SELECT CAST(NULL, 'Nullable(UInt32)') AS id, 2 AS timestamp UNION ALL SELECT 1 AS id, 1 AS timestamp );
SELECT arrayJoin([1, 60, 60*60, 60*60*24, 60*60*24*30, 60*60*24*365]) AS elapsed, formatReadableTimeDelta(elapsed*5.5) AS time_delta;
SELECT arrayJoin([toUUID('992f6910-42b2-43cd-98bc-c812fbf9b683'), toUUID('00000000-0000-0000-0000-000000000000')]) AS x, empty(x) AS emp;
select arrayMap(x, y -> floor((y - x) / x, 3), l, r) diff_percent, test, query from (select [1] l) s1, (select [2] r) s2, (select 'test' test, 'query' query) any_query, (select 1 ) check_single_query;
SELECT arrayMap(y -> round(y, 1), quantilesExactInclusive(0.1, 0.9)(x)) AS q FROM ( SELECT arrayJoin([-2147483648, 1, 2]) AS x );
SELECT arrayReduce('uniq', [1, 2, 1]) AS a, arrayReduce('uniq', [1, 2, 2, 1], ['hello', 'world', '', '']) AS b, arrayReduce('uniqUpTo(5)', [1, 2, 2, 1], materialize(['hello', 'world', '', ''])) AS c, arrayReduce('uniqExactIf', [1, 2, 3, 4], [1, 0, 1, 1]) AS d;
SELECT arrayReduceInRanges( 'groupArray', [(1, 3), (2, 3), (3, 3)], ['a', 'b', 'c', 'd', 'e'] );
SELECT arrayReduceInRanges( 'sum', [ (-6, 0), (-4, 0), (-2, 0), (0, 0), (2, 0), (4, 0), (-6, 1), (-4, 1), (-2, 1), (0, 1), (2, 1), (4, 1), (-6, 2), (-4, 2), (-2, 2), (0, 2), (2, 2), (4, 2), (-6, 3), (-4, 3), (-2, 3), (0, 3), (2, 3), (4, 3) ], [100, 200, 300, 400] );
SELECT arraySum(x -> ((x.1) / ((x.2) * (x.2))), arrayZip(mag, magerr)) / arraySum(x -> (1. / (x * x)), magerr) AS weightedmeanmag, arraySum(x -> ((((x.1) - weightedmeanmag) * ((x.1) - weightedmeanmag)) / ((x.2) * (x.2))), arrayZip(mag, magerr)) AS chi2, [1, 2, 3, 4] AS mag, [0.1, 0.2, 0.1, 0.2] AS magerr;
SELECT base.id AS `base.id`, derived1.value1 AS `derived1.value1` FROM test_01600.base AS base LEFT JOIN test_01600.derived1 AS derived1 ON base.id = derived1.id1;
SELECT bitmapHasAny(bitmapBuild([toUInt8(1)]), ( SELECT groupBitmapState(toUInt8(1)) )) has1, bitmapHasAny(bitmapBuild([toUInt64(1)]), ( SELECT groupBitmapState(toUInt64(2)) )) has2;
SELECT CAST(number, 'String') AS v2, caseWithExpression('x', 'y', 0, cond2) AS cond1, toNullable('1' = v2) AS cond2 FROM numbers(2);
SELECT categoricalInformationValue(x.1, x.2) FROM ( SELECT arrayJoin([(0, 0), (0, 0), (1, 0), (1, 0)]) as x );
SELECT categoricalInformationValue(x.1, x.2) FROM ( SELECT arrayJoin([(1, 0)]) as x );
SELECT column, subcolumns.names AS sname, subcolumns.types AS stype, subcolumns.bytes_on_disk > 0 FROM system.parts_columns ARRAY JOIN subcolumns WHERE database = currentDatabase() AND table = 't_subcolumns_sizes' AND active ORDER BY column, sname, stype;
SELECT count(), countOrNull(), sum(x), sumOrNull(x) FROM ( SELECT number AS x FROM numbers(10) WHERE number > 10 );
SELECT count(), sum(ns) FROM ( SELECT intDiv(number, NULL) AS k FROM system.numbers_mt GROUP BY k ) ARRAY JOIN ns;
select count(*) over (rows between current row and current row), count(*) over (range between current row and current row) from numbers(3);
SELECT CounterID, StartDate, Sign, VisitID, UserID, VisitVersion, BannerID, Load, PuidKeyArr, PuidValArr, arrayEnumerateUniqRanked(PuidKeyArr, PuidValArr) AS uniqTestPuid FROM arr_tests_visits ARRAY JOIN Test.BannerID AS BannerID, Test.Load AS Load, Test.PuidKey AS PuidKeyArr, Test.PuidVal AS PuidValArr;
SELECT d, toInt16OrNull(d), caseWithExpression(d, 'a', 3, toInt16OrZero(d)) AS case_zero, caseWithExpression(d, 'a', 3, toInt16OrNull(d)) AS case_null, if(d = 'a', 3, toInt16OrZero(d)) AS if_zero, if(d = 'a', 3, toInt16OrNull(d)) AS if_null FROM ( SELECT arrayJoin(['', '1', 'a']) AS d ) ORDER BY case_zero ASC, d ASC;
SELECT date_trunc('month', d), SUM(c) FROM t FINAL WHERE f2 = 'x' GROUP BY 1;
SELECT defaultValueOfTypeName('Int64'), defaultValueOfTypeName('String'), defaultValueOfTypeName('UUID'), defaultValueOfTypeName('IPv4'), defaultValueOfTypeName('IPv6'), defaultValueOfTypeName('Decimal128(3)'), defaultValueOfTypeName('Tuple(Date, DateTime(\'UTC\'), Array(Array(String)), Nullable(UInt8))');
SELECT dictGet('null_dict', 'val', 1337), dictGetOrNull('null_dict', 'val', 1337), dictGetOrDefault('null_dict', 'val', 1337, 111), dictGetUInt8('null_dict', 'val', 1337), dictGetUInt8OrDefault('null_dict', 'val', 1337, 111);
SELECT dictGet(concat(currentDatabase(), '.flat_dictionary'), 'value_en', number + 1), dictGet(concat(currentDatabase(), '.flat_dictionary'), 'value_ru', number + 1) FROM numbers(3);
SELECT diff, traf FROM order_by_nulls_first ORDER BY diff ASC NULLS FIRST, traf ASC;
SELECT diff, traf FROM order_by_nulls_first ORDER BY diff DESC NULLS LAST, traf DESC;
SELECT diff, traf FROM order_by_nulls_first order by diff desc NULLS FIRST, traf limit 1, 4;
SELECT domain, arrayUniq(groupArraySample(5, 11111)(DISTINCT subdomain)) AS example_subdomains FROM distinct_two_level GROUP BY domain ORDER BY domain, example_subdomains LIMIT 10;
SELECT DomainID, Domain FROM ( SELECT 1 AS DomainID FROM system.one ) js1 ANY LEFT JOIN ( SELECT 1 AS DomainID, 'abc' AS Domain UNION ALL SELECT 2 AS DomainID, 'def' AS Domain ) js2 USING DomainID;
SELECT id, avgWeightedIf(value1, weight, predicate_value), avgWeightedIf(value2, weight, predicate_value), avgWeightedIf(value3, weight, predicate_value) FROM test_table_null_specifics GROUP BY id ORDER BY id;
SELECT id, finalizeAggregation(dec) FROM consumer_02366;
SELECT id, sumIf(value1, predicate_value), sumIf(value2, predicate_value) FROM test_table_float_values GROUP BY id ORDER BY id;
SELECT id, sumIf(value1, predicate_value), sumIf(value2, predicate_value), sumIf(value3, predicate_value), sumIf(value4, predicate_value) FROM test_table_signed_values GROUP BY id ORDER BY id;
SELECT id, sumIf(value1, predicate_value), sumIf(value2, predicate_value), sumIf(value3, predicate_value), sumIf(value4, predicate_value) FROM test_table_unsigned_values GROUP BY id ORDER BY id;
SELECT id, value, length(value), normalizeUTF8NFC(value) AS nfc, length(nfc) AS nfc_len, normalizeUTF8NFD(value) AS nfd, length(nfd) AS nfd_len, normalizeUTF8NFKC(value) AS nfkc, length(nfkc) AS nfkc_len, normalizeUTF8NFKD(value) AS nfkd, length(nfkd) AS nfkd_len FROM normalize_test ORDER BY id;
SELECT if(empty(id), toString(device), id) AS device, multiIf( notEmpty(id),'a', device == '00000000-0000-0000-0000-000000000000', 'b', 'c' ) AS device_id_type, count() FROM table1 GROUP BY device, device_id_type ORDER BY device;
SELECT k, anyLast(s) FROM ( SELECT 123456789 AS k, 'Hello 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890' AS s UNION ALL SELECT 234567890, 'World 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890' ) GROUP BY k WITH TOTALS HAVING length(anyLast(s)) > 0 ORDER BY k;
select k, sum(c), uniqMerge(u), uniqExactMerge(ue) from summing_merge_tree_aggregate_function group by k;
SELECT k1, k2, SUM(number) AS sum_value, count() AS count_value FROM numbers(6) GROUP BY GROUPING SETS ( (number % 2 AS k1), (number % 3 AS k2) ) ORDER BY sum_value ASC, count_value ASC;
SELECT k1, k2, SUM(number) AS sum_value, count() AS count_value FROM remote('127.0.0.{2,3}', numbers(6)) GROUP BY GROUPING SETS ( (number % 2 AS k1), (number % 3 AS k2) ) ORDER BY sum_value ASC, count_value ASC;
SELECT k2, SUM(number) AS sum_value, count() AS count_value FROM remote('127.0.0.{2,3}', numbers(6)) GROUP BY GROUPING SETS ( (number % 3 AS k2) ) ORDER BY sum_value ASC, count_value ASC;
SELECT key, any(toString(n)) FROM ( SELECT arr.key AS key, n FROM x ARRAY JOIN arr ) GROUP BY key ORDER BY key;
SELECT key, ref_valueD, valueD, ref_valueD - valueD as dD FROM codecTest WHERE dD != 0 LIMIT 10;
SELECT key, ref_valueDT, valueDT, ref_valueDT - valueDT as dDT FROM codecTest WHERE dDT != 0 LIMIT 10;
SELECT key, ref_valueI16, valueI16, ref_valueI16 - valueI16 as dI16 FROM codecTest WHERE dI16 != 0 LIMIT 10;
SELECT key, ref_valueU64, valueU64, ref_valueU64 - valueU64 as dU64 FROM codecTest WHERE dU64 != 0 LIMIT 10;
SELECT key, ref_valueU8, valueU8, ref_valueU8 - valueU8 as dU8 FROM codecTest WHERE dU8 != 0 LIMIT 10;
SELECT key, value1, value2, toUInt64(min(time)) AS start_ts FROM join_inner_table PREWHERE (id = '833c9e22-c245-4eb5-8745-117a9a1f26b1') AND (number > toUInt64('1610517366120')) GROUP BY key, value1, value2 ORDER BY key, value1, value2 LIMIT 10;
SELECT key, value1, value2, toUInt64(min(time)) AS start_ts FROM join_inner_table__fuzz_1 PREWHERE (id = '833c9e22-c245-4eb5-8745-117a9a1f26b1') AND (number > toUInt64('1610517366120')) GROUP BY key, value1, value2 WITH ROLLUP ORDER BY key ASC, value1 ASC, value2 ASC NULLS LAST LIMIT 10 FORMAT Null;
SELECT key1, key2, table_1 FROM ( SELECT arrayJoin([1, 2, 3]) AS key1, 0 AS key2, 999 AS table_1 ) js1 ALL INNER JOIN ( SELECT arrayJoin([1, 3, 2]) AS key1, 0 AS key2, 999 AS table_1 ) js2 USING key1 ORDER BY key1;
SELECT label, number FROM ( SELECT 'a' AS label, number FROM ( SELECT number FROM numbers(10) ) UNION ALL SELECT 'b' AS label, number FROM ( SELECT number FROM numbers(10) ) ) WHERE number IN ( SELECT number FROM numbers(5) ) order by label, number;
SELECT length('\x80') FORMAT JSONCompact;
SELECT length(haystack), length(matches), arrayMap((x) -> length(x), matches) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractGroups(haystack, repeat('(\\w)', 100)) AS matches FROM numbers(3) );
SELECT length(haystack), length(matches), arrayReduce('sum', arrayMap((x) -> length(x), matches)) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractGroups(haystack, '(\\w)') AS matches FROM numbers(3) );
SELECT length(haystack), length(matches), length(matches[1]), arrayMap((x) -> length(x), matches[1]) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractAllGroupsHorizontal(haystack, repeat('(\\w)', 100)) AS matches FROM numbers(3) );
SELECT length(haystack), length(matches), length(matches[1]), arrayReduce('sum', arrayMap((x) -> length(x), matches[1])) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractAllGroupsHorizontal(haystack, '(\\w)') AS matches FROM numbers(3) );
SELECT length(haystack), length(matches[1]), length(matches), arrayMap((x) -> length(x), arrayMap(x -> x[1], matches)) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractAllGroupsVertical(haystack, repeat('(\\w)', 100)) AS matches FROM numbers(3) );
SELECT length(haystack), length(matches[1]), length(matches), arrayReduce('sum', arrayMap((x) -> length(x), arrayMap(x -> x[1], matches))) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractAllGroupsVertical(haystack, '(\\w)') AS matches FROM numbers(3) );
SELECT level, count() AS c FROM ( SELECT user_id, windowFunnel(6048000000000000)(timestamp, eventID = 1004, eventID = 1003, eventID = 1002) AS level FROM trend GROUP BY user_id ) GROUP BY level ORDER BY level ASC;
SELECT line, patterns, arrayFold(acc, pat -> position(line, pat), patterns, 0::UInt64) FROM tab ORDER BY line;
SELECT line, splitByNonAlpha(line), arrayFold( (acc, str) -> position(line, str), splitByNonAlpha(line), 0::UInt64 ) FROM tab;
SELECT m[toUUID('00001192-0000-4000-6000-000000000001')], m[toUUID('00001192-0000-4000-7000-000000000001')], m[toUUID('00001192-0000-4000-8000-000000000001')] FROM table_map_with_key_integer;
SELECT name, comment FROM system.tables WHERE name IN ('t1', 't2', 't3') AND database = currentDatabase() order by name;
SELECT name, table, hash_of_all_files, hash_of_uncompressed_files, uncompressed_hash_of_compressed_files FROM system.parts WHERE table = 'test_00961' and database = currentDatabase();
SELECT neighbor(n, -2) AS int, neighbor(s, -2) AS str, neighbor(lcs, -2) AS lowCstr FROM ( SELECT number % 5 AS n, toString(n) AS s, CAST(s, 'LowCardinality(String)') AS lcs FROM numbers(10) );
SELECT NULL, id, max(id) OVER (Rows BETWEEN 10 PRECEDING AND UNBOUNDED FOLLOWING) AS aid FROM ( SELECT NULL, max(id) OVER (), materialize(toLowCardinality('')) AS id FROM numbers_mt(0, 1) ) FORMAT `Null`;
SELECT NULL, proportionsZTest(257, 1048575, 1048575, 257, -inf, NULL), proportionsZTest(1024, 1025, 2, 2, 'unpooled');
SELECT number / 8 AS width, bar(width, 0, 3, 3) AS b, bar(width - 0.001, 0, 3, 3) AS `b_minus`, hex(b), hex(b_minus) FROM numbers(20);
SELECT number FROM numbers(10) GROUP BY GROUPING SETS ( number, number % 2 ) WITH ROLLUP;
SELECT number FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY number, grouping(number, number % 2) = 1 SETTINGS force_grouping_standard_compatibility=0;
SELECT number IN (1, 2) AS x, count() FROM numbers(10) GROUP BY x ORDER BY x;
SELECT number, count(), grouping(number, number % 2) AS gr FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number, number % 2), () ) ORDER BY (gr, number) SETTINGS force_grouping_standard_compatibility=0;
SELECT number, dictHas('simple_key_dictionary', number), dictGetOrNull('simple_key_dictionary', 'value', number), dictGetOrNull('simple_key_dictionary', 'value_nullable', number), dictGetOrNull('simple_key_dictionary', ('value', 'value_nullable'), number) FROM system.numbers LIMIT 5;
SELECT number, grouping(number, number % 2, number % 3) = 6 FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY number, number % 2 ORDER BY number;
SELECT number, grouping(number, number % 2, number % 3) AS gr FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY number, gr;
SELECT number, leadInFrame(number) OVER w AS W FROM numbers(10) WINDOW w AS (ORDER BY number ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 3;
SELECT number, number % 2, sum(number) AS val FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls = 0;
SELECT number, number % 2, sum(number) AS val FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls = 1;
SELECT number, sum(number) FROM numbers(10) WHERE number % 3 = 1 GROUP BY number WITH TOTALS ORDER BY 10, number DESC WITH FILL FROM 15;
SELECT number, sum(number) FROM numbers(10) WHERE number % 3 = 1 GROUP BY number WITH TOTALS ORDER BY number DESC WITH FILL FROM 15;
SELECT number, sum(number) OVER (PARTITION BY number % 10) / count() OVER (PARTITION BY number % 10), avg(number) OVER (PARTITION BY number % 10) FROM numbers(100) ORDER BY number ASC;
SELECT number, toString(number), range(number) AS arr, arrayMap(x -> toString(x), arr) AS arr_s, arrayMap(x -> range(x), arr) AS arr_arr, arrayMap(x -> arrayMap(y -> toString(y), x), arr_arr) AS arr_arr_s, arrayMap(x -> toFixedString(x, 3), arr_s) AS arr_fs FROM system.numbers LIMIT 5, 10;
SELECT nw, sum(WR) AS R, sumIf(WR, uniq_rows = 1) AS UNR FROM ( SELECT uniq(nw) OVER (PARTITION BY ac) AS uniq_rows, AVG(wg) AS WR, ac, nw FROM window_funtion_threading GROUP BY ac, nw ) GROUP BY nw ORDER BY nw ASC, R DESC LIMIT 10 SETTINGS max_threads = 1;
select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where p_partkey = ps_partkey and p_brand <> 'Brand#45' and p_type not like 'MEDIUM POLISHED%' and p_size in (49, 14, 23, 45, 19, 3, 36, 9) and ps_suppkey not in ( select s_suppkey from supplier where s_comment like '%Customer%Complaints%' ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
SELECT part_name, arraySort(groupArrayIf(table, event_type = 'MergeParts')) AS mergers, arraySort(groupArrayIf(table, event_type = 'DownloadPart')) AS fetchers FROM system.part_log WHERE (event_time > (now() - 120)) AND (table LIKE 'execute\\_on\\_single\\_replica\\_r%') AND (part_name NOT LIKE '%\\_0') AND (database = currentDatabase()) GROUP BY part_name ORDER BY part_name FORMAT Vertical;
SELECT pk1, pk2, pk4, pk3, count() as occurences FROM landing GROUP BY pk1, pk2, pk4, pk3 ORDER BY pk1, pk2, pk4, pk3;
SELECT pk1, pk2, pk4, pk3, countMerge(occurences) AS occurences FROM ds GROUP BY pk1, pk2, pk4, pk3 ORDER BY pk1, pk2, pk4, pk3;
SELECT ProfileEvents['S3HeadObject'], ProfileEvents['S3ListObjects'], ProfileEvents['RemoteFSPrefetches'], ProfileEvents['IOBufferAllocBytes'] < 100000 FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND query ILIKE 'SELECT count() FROM s3%test_02496%';
SELECT pt AS pt, exposure_uv AS exposure_uv FROM ( SELECT pt FROM test1 ) AS m0 FULL OUTER JOIN ( SELECT pt, exposure_uv FROM test1 ) AS m1 ON m0.pt = m1.pt;
SELECT q0.dt, q0.cnt, q1.cnt2 FROM ( SELECT toDate(addDays(toDate('2015-12-01'), number)) AS dt, sum(number) AS cnt FROM numbers(2) GROUP BY dt ) AS q0 ALL FULL OUTER JOIN ( SELECT toDate(addDays(toDate('2015-12-01'), number)) AS dt, sum(number) AS cnt2 FROM numbers(5) GROUP BY dt ) AS q1 ON q0.dt = q1.dt ORDER BY q1.cnt2;
SELECT QUERY_GROUP_ID, count() FROM slow_log WHERE current_database = currentDatabase() GROUP BY QUERY_GROUP_ID ORDER BY QUERY_GROUP_ID;
SELECT range(1), arrayMap(x -> arrayMap(x -> 1, range(x)), [1]) SETTINGS allow_experimental_analyzer = 0;
SELECT range(1), arrayMap(x -> arrayMap(y -> 1, range(x)), [1]) SETTINGS allow_experimental_analyzer = 1;
SELECT replaceRegexpOne(command, '(\\d{10})', 'timestamp') FROM system.mutations WHERE database = currentDatabase() AND table = 't_mutations_nondeterministic' AND is_done ORDER BY command;
SELECT round(categoricalInformationValue(x.1, x.2)[1], 6), round((2 / 2 - 2 / 3) * (log(2 / 2) - log(2 / 3)), 6) FROM ( SELECT arrayJoin([(0, 0), (1, 0), (1, 0), (1, 1), (1, 1)]) as x );
SELECT round(sigmoid(x), 5), round(sigmoid(toFloat32(x)), 5), round(sigmoid(toFloat64(x)), 5), round(tanh(x), 5), round(TANH(toFloat32(x)), 5), round(TANh(toFloat64(x)), 5) FROM (SELECT arrayJoin([-1, 0, 1]) AS x);
SELECT rowNr, val_string, neighbor(val_string, -1) AS str_m1, neighbor(val_string, 1) AS str_p1, val_low, neighbor(val_low, -1) AS low_m1, neighbor(val_low, 1) AS low_p1 FROM ( SELECT * FROM neighbor_test ORDER BY val_string, rowNr ) ORDER BY rowNr, val_string, str_m1, str_p1, val_low, low_m1, low_p1 format PrettyCompact;
SELECT s, parseDateTime64BestEffortUS(s,3,'UTC') AS a FROM ( SELECT arrayJoin([ '01-02-1930 12:00:00', '12.02.1930 12:00:00', '13/02/1930 12:00:00', '02/25/1930 12:00:00' ]) AS s) FORMAT PrettySpaceNoEscapes;
select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey;
SELECT small_hash == big_hash FROM (SELECT 1 AS key, sum(cityHash64(*)) AS small_hash FROM delta_codec_synthetic) INNER JOIN (SELECT 1 AS key, sum(cityHash64(*)) AS big_hash FROM default_codec_synthetic) USING(key);
SELECT status, count() AS all FROM test ARRAY JOIN nested as nestedJoined WHERE (status IN ( SELECT status FROM test ARRAY JOIN nested as nestedJoined GROUP BY status ORDER BY count() DESC LIMIT 10)) AND (id IN ('1', '2')) LIMIT 100;
SELECT str, replaceAll(str, 'o', '*') AS replaced FROM replaceall ORDER BY str ASC;
SELECT sum(1 + CAST(dummy AS Nullable(UInt8))) AS res1, toTypeName(res1) AS t1, sum(1 + nullIf(dummy, 0)) AS res2, toTypeName(res2) AS t2 FROM remote('127.0.0.{2,3}', system.one);
select sum(l_extendedprice * l_discount) as revenue from lineitem where l_shipdate >= date '1994-01-01' and l_shipdate < date '1994-01-01' + interval '1' year and l_discount between toDecimal32(0.06, 2) - toDecimal32(0.01, 2) and toDecimal32(0.06, 2) + toDecimal32(0.01, 2) and l_quantity < 24;
SELECT sum(n), 1 AS x FROM t GROUP BY x;
SELECT sum(total_count) AS total, domain FROM ( SELECT COUNT(*) AS total_count, SUM(if(domain = 'facebook.com', 1, 0)) AS facebookHits, domain FROM clicks GROUP BY domain UNION ALL SELECT COUNT(*) AS total_count, toUInt64(0) AS facebookHits, domain FROM transactions GROUP BY domain ) GROUP BY domain ORDER BY domain LIMIT 10 FORMAT JSONEachRow;
SELECT sum(total_count) AS total, domain FROM ( SELECT COUNT(*) AS total_count, toUInt64(0) AS facebookHits, domain FROM transactions GROUP BY domain UNION ALL SELECT COUNT(*) AS total_count, SUM(if(domain = 'facebook.com', 1, 0)) AS facebookHits, domain FROM clicks GROUP BY domain ) GROUP BY domain ORDER BY domain LIMIT 10 FORMAT JSONEachRow;
SELECT sum(user_id * _sample_factor) FROM sessions SAMPLE 10000000;
SELECT sumMapIf([1], [1], nullIf(number, 3) > 0) AS col1, countIf(1, nullIf(number, 3) > 0) AS col2, sumIf(1, nullIf(number, 3) > 0) AS col3 FROM numbers(1, 5);
SELECT t1.*, t2.*, 'world' AS constant, isConstant('world') FROM ( SELECT arrayJoin([1, 2]) AS k, 'hello' ) AS t1 LEFT JOIN ( SELECT arrayJoin([1, 3]) AS k, 'world' ) AS t2 ON t1.k = t2.k ORDER BY t1.k;
SELECT t1.*, t2.*, 123 AS constant, isConstant('world') FROM ( SELECT arrayJoin([1, 2]) AS k, 321 ) AS t1 LEFT JOIN ( SELECT arrayJoin([1, 3]) AS k, 123 ) AS t2 ON t1.k = t2.k ORDER BY t1.k;
SELECT table, type, new_part_name, num_postponed > 0 AS has_postpones, postpone_reason FROM system.replication_queue WHERE table LIKE 'execute\\_on\\_single\\_replica\\_r%' AND database = currentDatabase() ORDER BY table FORMAT Vertical;
SELECT table, name, type, compression_codec, data_uncompressed_bytes u, data_compressed_bytes c, round(u/c,3) ratio FROM system.columns WHERE table = 'codecTest' AND database = currentDatabase() AND compression_codec != '' AND ratio <= 1 ORDER BY table, name, type;
SELECT table, zookeeper_name, count() FROM system.replicas INNER JOIN system.parts USING (database, table) WHERE database = currentDatabase() GROUP BY table, zookeeper_name ORDER BY table, zookeeper_name FORMAT CSV;
SELECT test_table_join_1.* APPLY toString, test_table_join_2.* APPLY toString, test_table_join_3.* APPLY toString FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 AS t2 ON t1.id = t2.id INNER JOIN test_table_join_3 AS t3 ON t2.id = t3.id;
SELECT toDate(toDateTime((number * 10) * 86400, 'Asia/Istanbul')) AS d1, toDate(toDateTime(number * 86400, 'Asia/Istanbul')) AS d2, 'original' AS source FROM numbers(10) WHERE (number % 3) = 1 ORDER BY d1 WITH FILL STEP 5, d2 WITH FILL;
SELECT toDate(toDateTime((number * 10) * 86400, 'Asia/Istanbul')) AS d1, toDate(toDateTime(number * 86400, 'Asia/Istanbul')) AS d2, 'original' AS source FROM numbers(10) WHERE (number % 3) = 1 ORDER BY d2 WITH FILL, d1 WITH FILL STEP 5;
select toDecimal32(100.00, 2) * sum(case when p_type like 'PROMO%' then l_extendedprice * (1 - l_discount) else 0 end) / (1 + sum(l_extendedprice * (1 - l_discount))) as promo_revenue from lineitem, part where l_partkey = p_partkey and l_shipdate >= date '1995-09-01' and l_shipdate < date '1995-09-01' + interval '1' month;
SELECT toFloat32(number % 10) AS n, 'original' AS source FROM numbers(10) WHERE (number % 3) = 1 ORDER BY n ASC WITH FILL STEP 1 LIMIT 2;
SELECT toFloat64('1.7091'), toFloat64('1.5008753E7'), toFloat64('6e-09'), toFloat64('6.000000000000001e-9'), toFloat32('1.7091'), toFloat32('1.5008753E7'), toFloat32('6e-09'), toFloat32('6.000000000000001e-9') SETTINGS precise_float_parsing = 0;
SELECT toNullable(NULL) AS a, toNullable('Hello') AS b, toNullable(toNullable(1)) AS c, toNullable(materialize(NULL)) AS d, toNullable(materialize('Hello')) AS e, toNullable(toNullable(materialize(1))) AS f, toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d), toTypeName(e), toTypeName(f);
SELECT toTimeZone(timestamp, 'America/Sao_Paulo') AS converted, timestamp AS original FROM test LEFT JOIN (SELECT 2 AS x) AS anything ON x = i WHERE timestamp >= toDateTime('2020-05-13T00:00:00', 'America/Sao_Paulo');
SELECT toTypeName(i) FROM generateRandom('i UUID') LIMIT 1;
SELECT toTypeName(t2_value), t2.value AS t2_value FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 USING (id);
SELECT toTypeName(ui64), toTypeName(i64), toTypeName(ui32), toTypeName(i32), toTypeName(ui16), toTypeName(i16), toTypeName(ui8), toTypeName(i8) FROM generateRandom('ui64 UInt64, i64 Int64, ui32 UInt32, i32 Int32, ui16 UInt16, i16 Int16, ui8 UInt8, i8 Int8') LIMIT 1;
SELECT toUInt8(bitAnd(number, 4)) AS a, toUInt8(bitAnd(number, 2)) AS b, toUInt8(bitAnd(number, 1)) AS c, a AND b AND c AS AND, a OR b OR c AS OR FROM numbers(8) ;
SELECT toUnixTimestamp(timeBerlin), toUnixTimestamp(timeLA) FROM tztest;
SELECT tuple(1) = tuple(1), tuple(1) != tuple(1), tuple(1) < tuple(1), tuple(1) > tuple(1), tuple(1) <= tuple(1), tuple(1) >= tuple(1);
SELECT tuple(1) = tuple(2), tuple(1) != tuple(2), tuple(1) < tuple(2), tuple(1) > tuple(2), tuple(1) <= tuple(2), tuple(1) >= tuple(2);
SELECT ui64, i64, ui32, i32, ui16, i16, ui8, i8 FROM generateRandom('ui64 UInt64, i64 Int64, ui32 UInt32, i32 Int32, ui16 UInt16, i16 Int16, ui8 UInt8, i8 Int8', 1, 10, 10) LIMIT 10;
SELECT uniq(user_id) a, min(_sample_factor) x, a*x FROM sessions SAMPLE 10000000;
SELECT uniq(user_id) AS users, uniqIf(order_id, notEmpty(order_id)) AS orders FROM ( SELECT * FROM users ) t1 ALL LEFT JOIN ( SELECT * FROM orders ) t2 USING (user_id);
SELECT uniqExact(x) AS u, uniqExactIf(x, name = 'a') AS ue, uniqExactIf(x, name IN ('a', 'b')) AS ui FROM ( SELECT toNullable('a') AS name, arrayJoin(range(10)) AS x ) WHERE name = 'a';
SELECT uniqTheta(x), uniqTheta((x)), uniqTheta(x, y), uniqTheta((x, y)), uniqTheta(x, y, z), uniqTheta((x, y, z)) FROM ( SELECT number % 10 AS x, intDiv(number, 10) % 10 AS y, toString(intDiv(number, 100) % 10) AS z FROM system.numbers LIMIT 1000 );
SELECT UserID, UserID = 0, if(UserID = 0, 'delete', 'leave') FROM VALUES('UserID Nullable(UInt8)', (2), (0), (NULL));
SELECT v, length(finalizeAggregation(CAST(unhex(state) AS AggregateFunction(argMax, String, UInt64)))) FROM argmaxstate_hex_large;
SELECT v1.id, v2.id, L1Distance(v1.v, v2.v), LinfDistance(v1.v, v2.v), LpDistance(v1.v, v2.v, 3), L2Distance(v1.v, v2.v), L2SquaredDistance(v1.v, v2.v), cosineDistance(v1.v, v2.v) FROM vec2d v1, vec2d v2 WHERE length(v1.v) == length(v2.v);
SELECT val, val + 1 as prev, val + prev as val FROM ( SELECT 1 as val ) ;
SELECT value, time, round(exp_smooth, 3), bar(exp_smooth, 0, 10, 50) AS bar FROM ( SELECT (number = 0) OR (number >= 25) AS value, number AS time, exponentialTimeDecayedSum(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(50) );
SELECT value, time, round(exp_smooth, 3), bar(exp_smooth, 0, 20, 50) AS bar FROM ( SELECT (number % 5) = 0 AS value, number AS time, exponentialTimeDecayedCount(10)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(50) );
SELECT value, time, round(exp_smooth, 3), bar(exp_smooth, 0, 5, 50) AS bar FROM ( SELECT (number = 0) OR (number >= 25) AS value, number AS time, exponentialTimeDecayedAvg(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(50) );
SELECT x, t, round(max, 12) FROM ( SELECT d[1] AS x, d[2] AS t, exponentialTimeDecayedMax(100)(-x, t) OVER w AS max FROM ( SELECT [[2, 1], [1, 2], [10, 3], [4, 4], [5, 5], [1, 6], [10, 7], [10, 8], [10, 9], [9.81, 10], [9.9, 11]] AS d ) ARRAY JOIN d WINDOW w AS (ORDER BY 1 ASC Rows BETWEEN 2 PRECEDING AND 2 FOLLOWING) );
SELECT x, t, round(sum, 12), round(max, 12), round(count, 12), round(avg, 12) FROM ( SELECT sin(number) AS x, number AS t, exponentialTimeDecayedSum(100)(x, t) OVER w AS sum, exponentialTimeDecayedMax(100)(x, t) OVER w AS max, exponentialTimeDecayedCount(100)(t) OVER w AS count, exponentialTimeDecayedAvg(100)(x, t) OVER w AS avg FROM numbers(1000000) WINDOW w AS (ORDER BY 1 ASC Rows BETWEEN 2 PRECEDING AND 2 FOLLOWING) ) FORMAT `Null`;
SELECT (tuple(log_date) = tuple('2021-01-01'), log_date) FROM test_tuple_filter__fuzz_2 ORDER BY log_date;
SELECT (X.a + 1) AS a, (Y.a + 1) AS Y_a, (Z.a + 1) AS Z_a, (Y.b + 1) AS b, (Z.b + 1) AS Z_b FROM (SELECT 10 a) X CROSS JOIN (SELECT 20 a, 21 as b) Y CROSS JOIN (SELECT 30 a, 31 as b, 32 as c) Z;
SELECT arrayJoin(lttb(1000)(x, y)) AS point, tupleElement(point, 1) AS point_x, point_x - neighbor(point_x, -1) AS point_x_diff_with_previous_row FROM largestTriangleTreeBucketsBucketSizeTest LIMIT 990, 10;
select (select count() from test where test='case4'), (select sum(c) from test_mv_a where test='case4'), (select sum(c) from test_mv_b where test='case4'), (select sum(c) from test_mv_c where test='case4');
SELECT c1, range(0, c1) AS zero_as_start_val, range(1, c1) AS one_as_start_val, range(c1) AS no_start_val, range(c1, c1 * 2) AS val_as_start, range(c1, c1 * c1, c1) AS complex_start_step FROM values(1, 2, 3, 4, 5) FORMAT Vertical;
select count() / (select count() from nums_in_mem_dist where rand() > 0) from system.one;
SELECT d32, d64, d128 FROM generateRandom('d32 Decimal32(4), d64 Decimal64(8), d128 Decimal128(16)', 1, 10, 10) LIMIT 10;
SELECT f32, f64 FROM generateRandom('f32 Float32, f64 Float64', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Array(Int8)', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Tuple(Int32, Array(Int64))', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Tuple(Int32, Int64)', 1, 10, 10) LIMIT 10;
SELECT text, uniqExactIf(hash, hash IN ( SELECT DISTINCT hash FROM test_table AS t1 )) as counter FROM test_table AS t2 GROUP BY text ORDER BY counter, text;
select toJSONString(c) from ( select cast( (number:: String, null, (number:: String, null)), 'Tuple(a Nullable(String), b Nullable(Int64), c Tuple(x Nullable(String), y Nullable(Float64)))' ) as c from numbers(3) ) settings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 0;
select toJSONString(c) from ( select cast( (number:: String, null, (number:: String, null)), 'Tuple(a Nullable(String), b Nullable(Int64), c Tuple(x Nullable(String), y Nullable(Float64)))' ) as c from numbers(3) ) settings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 1;
SELECT toStartOfInterval(timestamp, INTERVAL 300 SECOND) AS ts FROM tab WHERE ts > '2022-11-24 11:19:00' GROUP BY ts;
SELECT toTypeName(d32), toTypeName(d64), toTypeName(d64) FROM generateRandom('d32 Decimal32(4), d64 Decimal64(8), d128 Decimal128(16)') LIMIT 1;
SELECT toTypeName(f32), toTypeName(f64) FROM generateRandom('f32 Float32, f64 Float64') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i Array(Int8)') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i Array(Nullable(Enum8(\'hello\' = 1, \'world\' = 5)))') LIMIT 1;
SELECT toTypeName(i)s FROM generateRandom('i Nullable(Enum16(\'h\' = 1, \'w\' = 5 , \'o\' = -200))') LIMIT 1;
select toYYYYMM(date) as date_, n from (select [toDate('20230815'), toDate('20230816')] as date, [1, 2] as n ) as data array join date, n where date_ >= 202303;
SELECT u.name user_name, 20 AS age_group FROM user_all u LEFT JOIN event e ON u.id = e.user_id WHERE (u.age >= 20 AND u.age < 30) AND e.created_time > '2022-01-01';
SELECT '=';
SELECT * EXCEPT 'bytes', COLUMNS('bytes') APPLY formatReadableSize FROM columns_transformers;
SELECT * FROM ( SELECT m0.pt ,m0.exposure_uv AS exposure_uv ,round(m2.exposure_uv,4) FROM ( SELECT pt ,exposure_uv FROM test1 ) m0 LEFT JOIN ( SELECT pt ,exposure_uv FROM test1 ) m1 ON m0.pt = m1.pt LEFT JOIN ( SELECT pt ,exposure_uv FROM test1 ) m2 ON m0.pt = m2.pt ) c0 ORDER BY exposure_uv settings join_use_nulls = 1;
SELECT * FROM test FORMAT Null;
select a, b || b from (select [number] as a, toString(number) as b from system.numbers limit 2);
-- SELECT A.a = B.a, A.b = B.b, A.c = B.c, A.d = B.d, A.e = B.e FROM ( SELECT 0 AS a, groupBitmapMerge(bm) AS b , SUM(k) AS c, SUM(value) AS d, SUM(dummy.1) AS e FROM 01504_test) A ANY LEFT JOIN (SELECT 0 AS a, groupBitmapMerge(bm) AS b , SUM(k) AS c, SUM(value) AS d, SUM(dummy.1) AS e FROM 01504_test_memory) B USING a ORDER BY a;
SELECT a.id, a.obj.* FROM t_json_analyzer FORMAT JSONEachRow;
select base.id as `base.id`, derived2.value2 as `derived2.value2`, derived1.value1 as `derived1.value1` from test_01600.base as base left join test_01600.derived2 as derived2 on base.id2 = derived2.id2 left join test_01600.derived1 as derived1 on base.id = derived1.id1;
select bitTest(0, 0) = 0, bitTest(1, 0) = 1, bitTest(1, 1) = 0, bitTest(0xff, 7) = 1;
SELECT c1.key, c1.name, c1.ref_valueF32, c1.valueF32, c1.ref_valueF32 - c1.valueF32 AS dF32, 'prev:', c2.key, c2.ref_valueF32 FROM codecTest as c1, codecTest as c2 WHERE dF32 != 0 AND c2.key = c1.key - 1 LIMIT 10;
SELECT cast(toDateTime64('1975-12-12 12:12:12.123', 3, 'UTC') as Decimal64(3));
SELECT color, timestamp FROM order_test1 GROUP BY color, timestamp ORDER BY color ASC, timestamp DESC;
SELECT COUNT() = 0 FROM (SELECT toDate('2019-01-01') AS day, day AS t FROM test_table PREWHERE t = '2020-01-03' WHERE t = '2020-01-03' GROUP BY t );
SELECT COUNT() = 0 FROM (SELECT toDate('2019-01-01') AS day1, day1 AS t FROM test_table PREWHERE t = '2020-01-03' WHERE t = '2020-01-03' GROUP BY t );
select dim , sum(idnum) from test_bm_join right join( select dim, bitmapOrCardinality(ids,ids2) as idnum from ( select dim, groupBitmapState(toUInt64(id)) as ids FROM test_bm where dim >2 group by dim ) A all right join ( select dim, groupBitmapState(toUInt64(id)) as ids2 FROM test_bm where dim < 2 group by dim ) B using(dim) ) C using(dim) group by dim;
select DISTINCT _partition_id from weird_partitions_02245 where d >= '2021-12-31 00:00:00' and d < '2022-01-01 00:00:00' ORDER BY _partition_id;
select if(number > 1, number, null) as value, number as offset, neighbor(value, offset) as neighbor from numbers(3);
SELECT intDivOrZero( CAST(-1000, 'Int64') , CAST(1000, 'Int64') );
SELECT intDivOrZero( CAST(-1000, 'Int64') , CAST(1000, 'UInt64') );
SELECT least(toInt8(127), toInt128(0)) x, least(toInt8(127), toInt128(128)) x2, least(toInt8(-128), toInt128(0)) x3, least(toInt8(-128), toInt128(-129)) x4, greatest(toInt8(127), toInt128(0)) y, greatest(toInt8(127), toInt128(128)) y2, greatest(toInt8(-128), toInt128(0)) y3, greatest(toInt8(-128), toInt128(-129)) y4, toTypeName(x), toTypeName(y);
SELECT least(toUInt8(255), toUInt256(0)) x, least(toUInt8(255), toUInt256(256)) x2, greatest(toUInt8(255), toUInt256(0)) y, greatest(toUInt8(255), toUInt256(256)) y2, toTypeName(x), toTypeName(y);
SELECT product_name, group_name, price, rank() OVER (PARTITION BY group_name ORDER BY price) rank FROM products INNER JOIN product_groups USING (group_id) order by group_name, rank, price, product_name;
SELECT product_name, price, group_name, AVG(price) OVER (PARTITION BY group_name) FROM products INNER JOIN product_groups USING (group_id) order by group_name, product_name, price;
SELECT toDateTime64('1969-12-31 23:59:59.123', 3, 'UTC');
SELECT toTypeName(a), toTypeName(b) FROM strings;
SELECT toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d), toTypeName(e), toTypeName(f) FROM floats;
SELECT toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d), toTypeName(e), toTypeName(f), toTypeName(g), toTypeName(h) FROM ints;
SELECT "number", CASE "number" WHEN 3 THEN 55 WHEN 6 THEN 77 WHEN 9 THEN 95 ELSE CASE WHEN "number"=1 THEN 10 WHEN "number"=10 THEN 100 ELSE 555555 END END AS "LONG_COL_0" FROM `system`.numbers LIMIT 20;
SELECT "numbers"."number" FROM "system"."numbers" LIMIT 1;
SELECT "ta`ble".dummy, 'hello''world' AS "hel""lo" FROM system.one AS `ta``ble`;
SELECT ' * A UNION * B:';
SELECT ' * A UNION Event, Datetime B:';
select ' -1: ';
SELECT ' UInt32 | UInt64 ';
SELECT '!#$%&(*+,-./:<=>?@[^`{|}~' AS a FORMAT Markdown;
select '# byteSize';
SELECT '# Changing format_csv_null_representation';
SELECT '#02136_scalar_subquery_3', (SELECT max(number) FROM numbers(1000)) as n, (SELECT max(number) FROM numbers(1000)) as n2;
SELECT '#1';
SELECT '' = ALL (SELECT toNullable(''));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('0.0.0.0')));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('e000::')));
SELECT '' AS ascii, idnaDecode(ascii) AS unicode, idnaEncode(unicode) AS original, tryIdnaEncode(unicode) AS original_try;
SELECT '', ['\0'], [], singleValueOrNull(( SELECT '\0' ) ), [''];
SELECT '';
select '';
SELECT '(0, A) id = 11', count() FROM (SELECT id, sequenceNextNode('backward', 'tail')(dt, action, 1, action = 'A') AS next_node FROM test_sequenceNextNode_Nullable WHERE id = 11 GROUP BY id HAVING next_node is NULL);
SELECT '(0, A->B->C) id = 11', count() FROM (SELECT id, sequenceNextNode('forward', 'head')(dt, action, 1, action = 'A', action = 'B', action = 'C') AS next_node FROM test_sequenceNextNode_Nullable WHERE id = 11 GROUP BY id HAVING next_node = 'D');
select '(key, left array join n.x) in ((1, 1), (2, 2))';
select '(key, left array join n.x) in (1, 1)';
SELECT '*';
SELECT '** replaceOne() **';
SELECT '-1', maxMerge(x), length(maxMerge(x)) from (select CAST(unhex('ffffffff') || randomString(100500), 'AggregateFunction(max, String)') as x);
SELECT '-1';
SELECT '-1e-1' AS x, toDecimal128(x, 0);
SELECT '-1e-39' AS x, toDecimal128(x, 38);
SELECT '-1E9-1E9-1E9-1E9' AS x, toDecimal32(x, 0);
SELECT '-2', maxMerge(x), length(maxMerge(x)) from (select CAST(unhex('fffffffe') || randomString(100500), 'AggregateFunction(max, String)') as x);
SELECT '-2.610898982580138', '0.00916587538237954';
SELECT '-21474836.48', 10000000000., '', count(kbytes), '', 10.0001, toStartOfMinute(datetime) AS dt_m, 10, NULL FROM projection_test__fuzz_0 GROUP BY dt_m WITH ROLLUP WITH TOTALS ORDER BY count(retry_count / duration) ASC NULLS LAST, 100000000000000000000. ASC NULLS FIRST format Null;
SELECT '-28.740781574102936', '7.667329672103986e-133';
SELECT '-2^31', maxMerge(x), length(maxMerge(x)) from (select CAST(unhex('00000080') || randomString(100500), 'AggregateFunction(max, String)') as x);
SELECT '-> $1.00 <-' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT '-†' AS idna, idnaEncode(idna) AS ascii, tryIdnaEncode(idna) AS ascii_try, idnaDecode(ascii) AS original, idnaDecode(ascii_try) AS original_try;
SELECT '...const maps...';
SELECT '...int keys...';
SELECT '...string keys...';
SELECT '/none';
select '/some/cool/url' as url format JSONEachRow;
SELECT '0' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('654f:3716::')));
SELECT '0.0.0.0 is ipv4 string: ', isIPv4String('0.0.0.0');
SELECT '0.0000000000000000001' AS x, toDecimal64(x, 18);
SELECT '0.0000000001' AS x, toDecimal32(x, 9);
SELECT '0.00339907162713746';
SELECT '0.02' GROUP BY GROUPING SETS (('6553.6'), (CAST('{"x" : 1}', 'Object(\'json\')'))) FORMAT Null;
SELECT '0.090773324285671';
SELECT '0.1' AS x, toDecimal128(x, 0);
SELECT '0.1' AS x, toDecimal64(x, 0);
SELECT '0.286';
SELECT '00000000-0000-03f8-9cb8-cb1b82fb3900' AS str, CAST(str, 'UUID');
SELECT '01473_trace_log_table_event_start_time_microseconds_test';
select '01546_log_queries_min_query_duration_ms-slow', sleep(0.4) format Null;
select '01547_query_log_current_database' from system.one format Null;
SELECT '01:02:03:04:05:06' AS mac_str, MACStringToNum(mac_str) AS mac_num, hex(mac_num), MACNumToString(mac_num) AS mac_str2, mac_str = mac_str2, MACStringToOUI(mac_str) AS oui_num, hex(oui_num), MACStringToOUI(substring(mac_str, 1, 8)) AS oui_num2, oui_num = oui_num2;
select '02005_log_formatted_queries.sql' from system.one;
select '02095_system_logs_hostname' from system.one format Null;
SELECT '0:0:0:0:0:0:0:0 is ipv6 string: ', isIPv6String('0:0:0:0:0:0:0:0');
SELECT '1 DAY';
select '1 left', * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(1)) t2 on x = xx or y = yy;
SELECT '1 MONTH';
SELECT '1 WEEK';
SELECT '1' != number FROM numbers(3);
SELECT '1' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('8000::')));
SELECT '1' == replaceRegexpAll('1,,', '^[,]*|[,]*$', '') x;
SELECT '1' == replaceRegexpOne(',,1', '^[,]*|[,]*$', '') x;
SELECT '1' > number FROM numbers(3);
SELECT '1' FROM numbers(10) INTERSECT DISTINCT SELECT '1' FROM numbers(10);
SELECT '1' FROM numbers(10) INTERSECT SELECT '1' FROM numbers(10);
SELECT '1' IN (SELECT 1);
SELECT '1';
SELECT '1,,' == replaceRegexpOne(',,1,,', '^[,]*|[,]*$', '') x;
SELECT '1,,' == replaceRegexpOne('1,,', '^[,]*|[,]*$', '') x;
select '1,..,2';
SELECT '1,a1,1', arrayEnumerateUniqRanked(1,a1,1) FROM arrays_test ORDER BY a1, a2;
SELECT '1,a1,1,a2,1', arrayEnumerateUniqRanked(1,a1,1,a2,1) FROM arrays_test ORDER BY a1, a2;
SELECT '1,a4,1', arrayEnumerateUniqRanked(1,a4,1) FROM arrays_test ORDER BY a1, a2;
SELECT '1. test simple distinct';
SELECT '1..20:';
SELECT '10 DAY';
SELECT '10' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffc0::')));
SELECT '100' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:f000:0')));
SELECT '100' AS number FROM d_numbers AS n WHERE n.number = 100 LIMIT 2 SETTINGS max_threads = 1, prefer_localhost_replica=1;
SELECT '100' AS number FROM d_numbers AS n WHERE n.number = 100 LIMIT 2;
select '10000000';
SELECT '1000000000' AS x, toDecimal32(x, 0);
SELECT '101' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:f800:0')));
select '1111' as name from system.numbers_mt order by name limit 10000 format Null;
SELECT '112' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:0')));
SELECT '127.0.0.0/16' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.0.255.127')));
SELECT '127.0.0.1 is ipv4 string: ', isIPv4String('127.0.0.1');
SELECT '127.0.0.{1,2}';
SELECT '127.255.255.128/32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.255.128')));
SELECT '128' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')));
SELECT '128.0,0.1' AS idna, idnaEncode(idna) AS ascii, tryIdnaEncode(idna) AS ascii_try, idnaDecode(ascii) AS original, idnaDecode(ascii_try) AS original_try;
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.248.0.0')));
SELECT '14' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fffc::')));
SELECT '14.971190998235835', '5.898143508382202e-44';
select '15 left', * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(15)) t2 on x = xx or y = yy;
SELECT '15 MINUTE';
SELECT '15' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fffe::')));
select '16 left', * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(16)) t2 on x = xx or y = yy;
select '17 any right', * from (select 1 as x, 2 as y) t1 any right join (select 1 as xx, 2 as yy from numbers(17)) t2 on x = xx or y = yy;
select '17 left', * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(17)) t2 on x = xx or y = yy;
select '17 right', * from (select 1 as x, 2 as y) t1 right join (select 1 as xx, 2 as yy from numbers(17)) t2 on x = xx or y = yy;
SELECT '17' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:8000::')));
SELECT '192.168.0.91 is ipv4 string: ', isIPv4String('192.168.0.91');
SELECT '192.168.0.91 is ipv6 string: ', isIPv6String('192.168.0.91');
SELECT '1947 #1 CHECK - FALSE' as test, ProfileEvents['SleepFunctionCalls'] as sleep_calls, ProfileEvents['SleepFunctionMicroseconds'] as sleep_microseconds FROM system.query_log WHERE query like '%CREATE MATERIALIZED VIEW src2dst_false%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT '1947 #3 CHECK - TRUE' as test, ProfileEvents['SleepFunctionCalls'] as sleep_calls, ProfileEvents['SleepFunctionMicroseconds'] as sleep_microseconds FROM system.query_log WHERE query like '%DESCRIBE ( SELECT ''1947 #3 QUERY - TRUE'',%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
select '1991-01-02' > toDate32('1990-02-01');
SELECT '1e-1' AS x, toDecimal128(x, 0);
SELECT '1M with 0', length(maxMerge(x)) from (select CAST(unhex('00001000') || randomString(0x00100000 - 1) || '\0', 'AggregateFunction(max, String)') as x);
SELECT '1M without 0', length(maxMerge(x)) from (select CAST(unhex('00001000') || randomString(0x00100000 - 1) || 'x', 'AggregateFunction(max, String)') as x);
SELECT '2' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('c000::')));
SELECT '2' FROM numbers(10) EXCEPT DISTINCT SELECT '1' FROM numbers(5);
SELECT '2' FROM numbers(10) EXCEPT SELECT '1' FROM numbers(5);
SELECT '2';
SELECT '2,a3,1,a4,2', arrayEnumerateUniqRanked(2,a3,1,a4,2) FROM arrays_test ORDER BY a1, a2;
SELECT '2,a3,2,a4,1', arrayEnumerateUniqRanked(2,a3,2,a4,1) FROM arrays_test ORDER BY a1, a2;
SELECT '2,a3,2,a4,2', arrayEnumerateUniqRanked(2,a3,2,a4,2) FROM arrays_test ORDER BY a1, a2;
SELECT '2. test distinct with subquery alias';
SELECT '20' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:f000::')));
SELECT '20..1:';
select '20000000';
SELECT '2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D is ipv6 string: ', isIPv6String('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D');
SELECT '2001:4860:4860::8888' AS idna, idnaEncode(idna) AS ascii, tryIdnaEncode(idna) AS ascii_try, idnaDecode(ascii) AS original, idnaDecode(ascii_try) AS original_try;
SELECT '2001:db8::/32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'prefix', tuple(IPv6StringToNum('2001:db8::1')));
SELECT '2010-10-10'::Date AS c;
SELECT '2010-10-10'::DateTime('UTC') AS c;
SELECT '2015-02-03 04:05:06' < materialize(toDateTime('2015-02-03 05:06:07'));
SELECT '2015-02-05' <= toDate('2015-02-04');
SELECT '2015-02-05' > materialize(toDate('2015-02-04'));
SELECT '2015-02-05' > toDate('2015-02-04');
SELECT '2015-02-05' >= toDate('2015-02-04');
SELECT '2022-10-11'::Date + tuple(INTERVAL 1 DAY);
SELECT '2022-10-11'::Date - tuple(INTERVAL 1 DAY);
SELECT '2023-10-23' + INTERVAL 1 DAY, '2023-10-23 12:34:56.123' + INTERVAL 1 DAY;
SELECT '2023-10-23' - INTERVAL 1 HOUR, '2023-10-23 12:34:56.123' - INTERVAL 1 HOUR;
SELECT '2023-10-23' - INTERVAL 1 MICROSECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 MICROSECOND;
SELECT '2023-10-23' - INTERVAL 1 MILLISECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 MILLISECOND;
SELECT '2023-10-23' - INTERVAL 1 MINUTE, '2023-10-23 12:34:56.123' - INTERVAL 1 MINUTE;
SELECT '2023-10-23' - INTERVAL 1 MONTH, '2023-10-23 12:34:56.123' - INTERVAL 1 MONTH;
SELECT '2023-10-23' - INTERVAL 1 NANOSECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 NANOSECOND;
SELECT '2023-10-23' - INTERVAL 1 QUARTER, '2023-10-23 12:34:56.123' - INTERVAL 1 QUARTER;
SELECT '2023-10-23' - INTERVAL 1 SECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 SECOND;
SELECT '2023-10-23' - INTERVAL 1 WEEK, '2023-10-23 12:34:56.123' - INTERVAL 1 WEEK;
SELECT '2023-10-23' - INTERVAL 1 YEAR, '2023-10-23 12:34:56.123' - INTERVAL 1 YEAR;
SELECT '21' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:f800::')));
SELECT '22' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fc00::')));
SELECT '223.0', '0.5426959774289482';
select '2283-11-11' > toDate32('1925-02-01');
select '2283-11-11' >= toDate32('2283-11-10');
SELECT '48' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff::')));
SELECT '48_KO', finalizeAggregation(CAST(unhex('30000000303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637010000000000000000'), 'AggregateFunction(argMax, String, UInt64)'));
SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:c000::')));
select '5 left', * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(5)) t2 on x = xx or y = yy;
SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('248.0.0.0')));
SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('252.0.0.0')));
SELECT '= 127.0.0.1', ipv4_ FROM ipv4_test WHERE ipv4_ = toIPv4('127.0.0.1') ORDER BY ipv4_;
SELECT '= 127.0.0.1', ipv6_ FROM ipv6_test WHERE ipv6_ = IPv4ToIPv6(toIPv4('127.0.0.1')) ORDER BY ipv6_;
SELECT '\\w' LIKE '\\w';
SELECT '\\xyz\\' LIKE '\\\\___\\\\';
SELECT '\x01\x00'::AggregateFunction(groupBitmap, UInt32);
SELECT '\xED\x20\xA8' AS s FORMAT JSONObjectEachRow;
SELECT '\xED\x20\xA8' AS s FORMAT XML;
SELECT 'a' < 'a\0b', 'a' > 'a\0b';
SELECT 'a' AS arr1, 2 AS arr2, round(arrayJaccardIndex(arr1, arr2), 2);
SELECT 'a' AS key, 'b' as value GROUP BY ignore(1);
SELECT 'a' AS key, 'b' as value GROUP BY key WITH CUBE SETTINGS allow_experimental_analyzer = 1;
SELECT 'a' AS key, 'b' as value GROUP BY key;
SELECT 'A' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'a' IN (SELECT 1) SETTINGS transform_null_in = 1;
SELECT 'a' UNION ALL (SELECT 'a' UNION ALL SELECT 'a' UNION SELECT 'a');
SELECT 'a' UNION ALL SELECT 'a' UNION ALL SELECT 'a' UNION SELECT 'a';
SELECT 'a' UNION SELECT 'a' UNION SELECT 'a' UNION ALL SELECT'a';
SELECT 'a', -x FROM primary_key WHERE -x < -3;
select 'a1' as _file, * from test_02302 where _file like '%1' ORDER BY a;
SELECT 'a3,a4 1..1', arrayEnumerateUniqRanked(a3,a4) FROM arrays_test ORDER BY a3, a4;
SELECT 'a\0\0\0\0' < 'a\0\0\0', 'a\0\0\0\0' > 'a\0\0\0';
select 'Abs(Offset) > block';
SELECT 'abæcdöef' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'ACTUAL LOG CONTENT:';
SELECT 'Additional test';
SELECT 'aes-256-ofb' as mode, aes_decrypt_mysql(mode, aes_encrypt_mysql(mode, input, key, iv), key, iv) == input FROM encryption_test;
SELECT 'aes-256-ofb' as mode, decrypt(mode, encrypt(mode, input, key32, iv), key32, iv) == input FROM encryption_test;
SELECT 'aes-256-ofb' as mode, hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-256-ofb' as mode, hex(encrypt(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes_decrypt_mysql';
SELECT 'Africa/El_Aaiun', rand() as r, toHour(toDateTime(r, 'Africa/El_Aaiun') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;
SELECT 'after_transaction_target', count() FROM target;
SELECT 'ALL main_table_01818', count() FROM main_table_01818;
SELECT 'all' UNION SELECT 'all' UNION ALL SELECT 'all';
select 'alter column, NULL modifier is not allowed';
SELECT 'AMAZON' AS idna, idnaEncode(idna) AS ascii, tryIdnaEncode(idna) AS ascii_try, idnaDecode(ascii) AS original, idnaDecode(ascii_try) AS original_try;
SELECT 'Array min ', (arrayMin(array(1,2,3,4,5,6)));
select 'Array', blockSerializedSize(['foo']);
SELECT 'Asia/Pyongyang', rand() as r, toHour(toDateTime(r, 'Asia/Pyongyang') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;
SELECT 'Asia/Pyongyang', toDateTime('2020-01-02 03:04:05', 'Asia/Pyongyang') AS x, toStartOfDay(x), toHour(x);
select 'aXb' like 'a_b', 'aXb' like 'a\_b', 'a_b' like 'a\_b', 'a_b' like 'a\\_b';
SELECT 'a{' AS x, x LIKE (concat('%', x) AS pat), materialize(x) LIKE pat;
SELECT 'a}a' AS x, x LIKE (x AS pat), materialize(x) LIKE pat;
SELECT 'CD' FROM sequence GROUP BY userID HAVING sequenceMatch('(?1)(?t>=10000000000000)(?2)')(EventTime, eventType = 'C', eventType = 'D');
SELECT 'ceil() : ', toDecimal256('1234567890.123456789', 40) AS x, -x AS y, ceil(x), ceil(y), ceil(x, -3), ceil(y, -3);
select 'dictGet', 'hashed_sparse_ints' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'i8', k), dictGet(dict_name, 'i16', k), dictGet(dict_name, 'i32', k), dictGet(dict_name, 'i64', k), dictGet(dict_name, 'u8', k), dictGet(dict_name, 'u16', k), dictGet(dict_name, 'u32', k), dictGet(dict_name, 'u64', k), dictGet(dict_name, ('i8', 'i16', 'i32'), k);
SELECT 'Hello' || convertCharset(unhex('2028'), 'utf16be', 'utf8') || 'World' || convertCharset(unhex('2029'), 'utf16be', 'utf8') || '!' AS x, hex(x) AS h FORMAT JSONEachRow;
SELECT 'Hello' || convertCharset(unhex('2028'), 'utf16be', 'utf8') || 'World' || convertCharset(unhex('2029'), 'utf16be', 'utf8') || '!' AS x, hex(x) AS h FORMAT TSV;
select 'hello', untuple((* except (b),)), 'world' from (select 1 a, 2 b, 3 c);
SELECT 'Hello, "World"' AS x, 123 AS y, [1, 2, 3] AS z, (456, ['abc', 'def']) AS a, 'Newline\nhere' AS b FORMAT CSVWithNamesAndTypes;
SELECT 'Hello, world!' FROM merge_view_00270 LIMIT 5;
SELECT 'Hello, world' FROM (SELECT number FROM system.numbers LIMIT 10) WHERE number < 0 FORMAT JSONCompact;
SELECT 'https://www.clickhouse.com/' AS s, REGEXP_REPLACE(s, '^https?://(?:www\.)?([^/]+)/.*$', '\1');
SELECT 'n a rj n', t1.x, t2.x FROM nt AS t1 ANY RIGHT JOIN ntxy AS t2 ON t1.x = t2.x OR t1.x = t2.y ORDER BY t1.x;
SELECT 'n a rj t', t1.x, t2.x FROM ntxy AS t1 ANY RIGHT JOIN t AS t2 ON t1.x = t2.x OR t1.y = t2.x ORDER BY t1.x;
SELECT 'n fj n', t1.x, t2.x FROM nt AS t1 FULL JOIN nt AS t2 ON t1.x = t2.x ORDER BY t1.x;
SELECT 'n fj n', t1.x, t2.x FROM nt AS t1 FULL JOIN nt AS t2 USING(x) ORDER BY t1.x;
SELECT 'n fj t', t1.x, t2.x FROM ntxy AS t1 FULL JOIN t AS t2 ON t2.x = t1.y OR t1.x = t2.x ORDER BY t1.x;
SELECT 'n rj n', t1.x, t2.x FROM nt AS t1 RIGHT JOIN nt AS t2 ON t1.x = t2.x ORDER BY t1.x;
SELECT 'n rj t', t1.x, t2.x FROM nt AS t1 RIGHT JOIN t AS t2 USING(x) ORDER BY t1.x;
SELECT 'Q2', * FROM mt WHERE d = '1970-01-01';
select 'quarter', date_diff('quarter', toDate32('1969-12-25'), toDate32('1970-01-05'));
SELECT 'US' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('2620:0:870::')));
SELECT 'value: ', avg(number * 2) FROM numbers(10);
SELECT 'value: ', avg(number + 2) FROM numbers(10);
SELECT 'value: ', avg(number - 2) FROM numbers(10);
SELECT 'value: ', avg(number / 2) FROM numbers(10);
SELECT 'ZZ' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('2001:db8:ffff::')));
select '{ key: fn, value: concat }' == concat('{ key: ', toFixedString('fn', 2), ', value: ', 'concat', ' }');
select '{ key: fn, value: concat }' == format('{}{}{}{}{}', '{ key: ', toFixedString('fn', 2), ', value: ', 'concat', ' }');
SELECT '{"a": {"b": 1, "c": 2}}'::JSON AS s format JSONEachRow;
SELECT '{"a": {"b": 1, "c": 2}}'::JSON AS s;
SELECT '}a' AS x, x LIKE (concat(x, '%') AS pat), materialize(x) LIKE pat;
SELECT '}a' AS x, x LIKE (x AS pat), materialize(x) LIKE pat;
SELECT 'привет' AS x, 'мир' AS y FORMAT PrettySpace;
SELECT 'Щущпандер' ILIKE '%щП%е%';
SELECT 'ёЁё' ILIKE 'Ё%Ё';
SELECT (*,).1 AS c, toTypeName(c) FROM tmp;
SELECT (- ((((tan (t1.c0)))+(t1.c0)))), (cos ((sin (pow(t1.c0,t1.c0))))), ((gcd((- (t1.c0)),((t1.c0)+(t1.c0))))*((- ((- (t1.c0)))))) FROM t1 GROUP BY (sqrt ((- (t1.c0)))), t1.c0, pow((erf ((- (t1.c0)))),t1.c0);
SELECT (0 + 1 + 2 + 3 + 4)::Date AS c;
select (0 + 1, 1, toInt8(sin(5))) in (0 + 1, 1, toInt8(sin(5)));
select (1 ? (toUInt16(0) as i) : toInt64(1)) = i;
select (1, (2, 'foo')) in tuple((1, (3, 'b')), (1, (2, 'foo')));
SELECT (1, 1) IN [(1, 2), (1, 2)];
SELECT (1, 1.0, NULL) / NULL;
SELECT (1, 2) / 2;
SELECT (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) IN ((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17));
SELECT (1, 3) IN (SELECT 1, 2);
SELECT (1, [1]);
SELECT (1, materialize(2)) IN (SELECT 1, 2);
SELECT (1, materialize(2)) IN (SELECT materialize(1), 2);
SELECT (1, materialize(2), 'World') IN (SELECT materialize(1), 2, 'Hello');
SELECT (1, materialize(2), materialize('Hello')) IN (SELECT materialize(1), 2, 'Hello');
SELECT (1, materialize(3)) IN (SELECT materialize(1), 2);
SELECT (1, NULL) IN (1, NULL);
SELECT (1,'') IN (1,'');
select (1,2) as x, ((1,2),(3,4)) as y, 1 in x, x in y;
select (3) in [1, 2];
SELECT (5,4) % 2;
SELECT ([(1,3), (2,9)] + [(10.1, 2.4), (4,12)]);
SELECT ([12,13] % [5,6]);
select ([1], [2]) in tuple([NULL], [NULL]);
SELECT ([2.5, 1, 3, 10.1] + [2, 4, 9, 0]);
SELECT ([[1,1],[2]]+[[12,1],[1]]);
SELECT ([materialize(1),materialize(2),materialize(3)]-[1,2,3]);
select (a, 0) from t_tuple_sparse;
SELECT (a, d, g) = (b, e, h), (a, d, g) != (b, e, h) FROM decimal ORDER BY a;
select (a, NULL) from t_tuple_sparse;
SELECT (arrayJoin(['hello', 'world']) AS s) IN set, s;
SELECT (c + 1) as d, (a + 1) as b, 1 AS a, (b + 1) as c, d;
select (date '2001-09-29' + 7) x, toTypeName(x);
SELECT (nullIf(number, 4), -nullIf(number, 3)) IN (SELECT nullIf(number, 2), -number FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
select (toInt128(-1) + toInt16(1)) x, (toInt256(-1) + toInt16(1)) y, toTypeName(x), toTypeName(y);
SELECT * FROM ( EXPLAIN PLAN indexes = 1 SELECT * FROM tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( SELECT 1 AS a, 2 AS b FROM system.one JOIN system.one USING dummy UNION ALL SELECT 3 AS a, 4 AS b FROM system.one ) WHERE a != 10 ORDER BY a, b;
SELECT * FROM ( SELECT ['left'] as ar, 42 AS left_number ) js1 FULL JOIN ( SELECT ['right'] as ar, 42 AS right_number ) js2 USING(ar) ORDER BY left_number;
SELECT * FROM ( SELECT ['left'] as ar, number AS left_number FROM system.numbers LIMIT 2 ) js1 FULL JOIN ( SELECT ['right'] as ar, number AS right_number FROM system.numbers LIMIT 1, 2 ) js2 ON left_number = right_number ORDER BY left_number;
SELECT * FROM ( SELECT a FROM remote('127.0.0.1', currentDatabase(), local_t) GROUP BY a WITH TOTALS ) WHERE a IN ( SELECT 1 );
SELECT * FROM ( SELECT a, t1.val as val1, t2.val as val2 FROM t t1 ANY LEFT JOIN t t2 USING a ) ORDER BY val1;
SELECT * FROM ( SELECT number, ['left'] as ar, number AS left_number FROM system.numbers LIMIT 2 ) js1 FULL JOIN ( SELECT number, ['right'] as ar, number AS right_number FROM system.numbers LIMIT 1, 2 ) js2 USING (number) ORDER BY number;
SELECT * FROM ( SELECT number, n, j1, j2 FROM (SELECT dummy + 2 AS number, number / 2 AS n FROM remote('127.0.0.{2,3}', system.one)) ANY INNER JOIN (SELECT number / 3 AS n, number AS j1, 'Hello' AS j2 FROM system.numbers LIMIT 0) USING n LIMIT 10 ) ORDER BY number;
SELECT * FROM ( SELECT reinterpretAsString(number + reinterpretAsUInt8('A')) AS k FROM system.numbers LIMIT 10 ) js1 ALL LEFT JOIN ( SELECT reinterpretAsString(intDiv(number, 2) + reinterpretAsUInt8('A')) AS k, number AS joined FROM system.numbers LIMIT 10 ) js2 USING k ORDER BY k, joined ;
SELECT * FROM ( WITH ( SELECT groupArray(a) FROM ( SELECT 1 AS a ) ) AS keys, ( SELECT groupArray(a) FROM ( SELECT 2 AS a ) ) AS values SELECT * FROM ( SELECT 1 AS a ) WHERE transform(a, keys, values, 0) ) AS wrap;
SELECT * FROM ( SELECT * FROM union_bug WHERE Event = 'A' UNION ALL SELECT Event, Datetime FROM union_bug WHERE Event = 'B' ) ORDER BY Datetime;
SELECT * FROM ( SELECT Event, Datetime FROM union_bug WHERE Event = 'A' UNION ALL SELECT Event, Datetime FROM union_bug WHERE Event = 'B' ) ORDER BY Datetime;
SELECT * from ( EXPLAIN indexes = 1 SELECT * FROM data_02771 WHERE x = 1 AND y = 2 SETTINGS ignore_data_skipping_indices='xy_idx' ) WHERE explain NOT LIKE '%Expression%' AND explain NOT LIKE '%Filter%';
select * from ( SELECT * FROM l full outer join r on l.luid = r.ruid limit 100000000) where luid is null and ruid is not null;
select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab3) order by (a + b) * c, sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c) where explain like '%sort description%' or explain like '%ReadType%';
select * from (explain plan actions = 1 select * from (select * from tab where (a + b) * c = 8 union all select * from tab4) order by sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by intDiv((a + b) * c, 2), sin(a / b)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab2 order by toStartOfDay(x), intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';
SELECT * FROM (SELECT 'a' :: LowCardinality(Nullable(String)) AS key) AS t1 JOIN (SELECT 'a' :: Nullable(String) AS key) AS t2 ON t1.key = t2.key ORDER BY key;
SELECT * FROM (SELECT 'a' :: LowCardinality(Nullable(String)) AS key) AS t1 JOIN (SELECT 'a' :: String AS key) AS t2 ON t1.key = t2.key ORDER BY key;
SELECT * FROM (SELECT 'a' :: LowCardinality(String) AS key) AS t1 JOIN (SELECT 'a' :: LowCardinality(String) AS key) AS t2 ON t1.key = t2.key ORDER BY key;
select * from (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t1 left join (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t2 on t1.d = t2.b or t1.c = t2.b or t1.d = t2.b and t1.d = t2.b or (t1.e = t2.e and t1.a=t2.a and t2.f=t1.f);
select * from (select 'a' as a, 'b' as b, 42 as forty_two) as t1 inner join (select 'a' as a, 'b' as b, 42 as forty_two) as t2 on t1.b = t2.a or t1.forty_two = t2.forty_two;
select * from (select 'a' as a, number as c from numbers(2)) as t1 join (select 'a' as a, number as c from numbers(2)) as t2 on t1.c = t2.c or t1.a = t2.a order by t1.c, t2.c;
SELECT * FROM (SELECT * FROM test_00597) ANY LEFT JOIN (SELECT * FROM test_00597) USING id WHERE id = 1 SETTINGS allow_experimental_analyzer=1;
SELECT * FROM (SELECT * FROM test_00597) AS b WHERE b.id = 1;
select * from (SELECT number as a FROM numbers(10)) t1 PASTE JOIN (select number as a from numbers(10)) t2;
select * from (select number, count() from numbers(2) group by number with totals) where number > 0 settings enable_optimize_predicate_expression=0;
select * from (select number, intDiv(number,5) value from numbers(20) order by value limit 3 with ties) ORDER BY number, value;
SELECT * FROM (SELECT path, name, value FROM system.zookeeper ORDER BY path, name) WHERE path LIKE '/' || currentDatabase() || '/1-insert-test%';
SELECT * FROM (SELECT path, name, value FROM system.zookeeper ORDER BY path, name) WHERE path LIKE '/' || currentDatabase() || '/2-insert-test%';
SELECT * FROM (SELECT perf_1.z AS z_1 FROM perf AS perf_1);
SELECT * FROM (SELECT range(number) AS x FROM system.numbers LIMIT 10) WHERE length(x) % 2 = 0;
select * from (select sum(number) from num_10m union all select sum(number) from num_10m) limit 1 settings max_block_size = 1024;
SELECT * FROM (SELECT sum(x) AS a, avg(x) AS b FROM (SELECT number AS x FROM numbers(10)));
SELECT * FROM (SELECT toInt128(NULL) AS x UNION ALL SELECT materialize(toInt128(-2))) WHERE x;
SELECT * FROM (SELECT toInt8(1) AS id) ANY LEFT JOIN test_00597 USING id WHERE value = 1;
select * from (select toLowCardinality(4) as x) s1 left join (select 4 as x) s2 using x;
select * from (select toLowCardinality(dummy) as val from system.one) any left join (select dummy as rval from system.one) on val + 0 = rval * 1;
select * from (select toLowCardinality(dummy) as val from system.one) any left join (select dummy as val from system.one) using val;
SELECT * FROM (select toUInt64(1) s limit 1) js1 any right join (select number s, s as x from numbers(11)) js2 using (s) ORDER BY s;
SELECT * FROM (SELECT toUInt64(b) AS a, sum(id) AS b FROM test_00597 AS table_alias) AS outer_table_alias WHERE outer_table_alias.b = 3;
SELECT * FROM (SELECT toUInt64(b) AS a, sum(id) AS b FROM test_00597) WHERE a = 3;
SELECT * FROM `01682_database_for_cache_dictionary`.cache_dictionary_complex_key_simple_attributes ORDER BY id;
SELECT * FROM `01686_test` WHERE key = 'Hello';
SELECT * FROM `01720_dictionary_db`.dictionary;
SELECT * FROM `01760_db`.example_complex_key_dictionary;
SELECT * FROM `01760_db`.example_simple_key_dictionary;
SELECT * FROM `01765_db`.hashed_dictionary_simple_key_complex_attributes ORDER BY id;
SELECT * FROM `02538_bf_ngrambf_map_values_test` PREWHERE (map['']) = 'V2V\0V2V2V2V2V2V2' WHERE (map[NULL]) = 'V2V\0V2V2V2V2V2V2V2V\0V2V2V2V2V2V2V2V\0V2V2V2V2V2V2V2V\0V2V2V2V2V2V2' SETTINGS force_data_skipping_indices = 'map_values_ngrambf';
SELECT * FROM `02668_logical_optimizer` WHERE 3 = a AND b = 'another' AND a = 3;
select * from `table_00609` prewhere val > 2 format Null;
SELECT * FROM a ANY LEFT OUTER JOIN j USING id ORDER BY a.id, a.val SETTINGS enable_optimize_predicate_expression = 0;
SELECT * FROM a ANY LEFT OUTER JOIN j USING id ORDER BY a.id, a.val SETTINGS enable_optimize_predicate_expression = 1;
SELECT * FROM a INNER JOIN b USING(key) GROUP BY ID, key;
select * from a where i > 0 and j = 4 settings force_index_by_date = 1;
SELECT * FROM a1 as a left JOIN a2 as b on a.a=b.a ORDER BY b SETTINGS join_default_strictness='ANY';
select * from auto_assign_enum1 where x = -999;
SELECT * FROM bf_ngrambf_map_values_test WHERE map['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_values_ngrambf';
SELECT * FROM bf_ngrambf_map_values_test WHERE map['K3'] != '';
select * from format('RowBinaryWithDefaults', 'x UInt32 default 42', x'01');
select * from format('TSV', '01/12/1925');
select * from format(BSONEachRow, 'x UInt32', x'00000000');
select * from format(BSONEachRow, 'x UInt32, y UInt32', x'1a0000001078002a0000001078002a0000001079002a00000000');
select * from format(CSV, '""');
select * from format(CSV, '1,1\n2\n\n3,3,3,3') settings input_format_csv_allow_variable_number_of_columns=1;
select * from format(CSV, 'd Date, s String', '2020-01-2,SomeString');
SELECT * FROM format(Native, 'k0\x23Array(Tuple(FixedString(1), Int64))\0\0\0\0\0\0\0�����\0����������������\0�\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0d\0\0\0\0\0\0\0\0\0\0\0\0\0�1?Vi�%');
select * from format(TSV, 'x UInt32, y UInt32', '1\t2\n\n') settings input_format_tsv_skip_trailing_empty_lines=0;
select * from format(TSVWithNames, 'x\ty\n1\t1\n2\n\n3\t3\t3\t3') settings input_format_tsv_allow_variable_number_of_columns=1;
SELECT * FROM format(TSVWithNamesAndTypes, 'ip\tport\nIPv6\tUInt16\n::1\t42\n');
select * from forms where text_field like '%this%' or 0 = 1;
SELECT * FROM functional_index_mergetree WHERE x < 7.49;
SELECT * FROM functional_index_mergetree WHERE x > 7.41 AND x < 7.51;
SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{"schedule":[{"breakfast":"7am"}, {"lunch":"12pm"}]}', random_seed=123456, reuse_output=0, max_output_length=128) LIMIT 20;
SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{"ClickHouse":"Is Fast"}', random_seed=1337) LIMIT 20;
SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{"students":[{"name":"Alice"}, {"name":"Bob"}]}', random_seed=1337) LIMIT 20;
SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed=54321) LIMIT 10;
SELECT * FROM map_extractKeyLike_test ORDER BY id;
SELECT * FROM map_formats ORDER BY m['k1'] FORMAT CSV;
SELECT * FROM map_formats ORDER BY m['k1'] FORMAT JSON;
SELECT * FROM map_formats ORDER BY m['k1'] FORMAT JSONEachRow;
SELECT * FROM map_formats ORDER BY m['k1'] FORMAT TSKV;
SELECT * FROM map_formats ORDER BY m['k1'] FORMAT TSV;
SELECT * FROM map_test_index_map_keys WHERE has(map, '') SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM merge(currentDatabase(), 'test_s64_distributed|test_u64_distributed') WHERE date = '2018-08-01' ORDER BY value;
SELECT * FROM merge(currentDatabase(), 'test_s64_distributed|test_u64_distributed') WHERE value = 1;
SELECT * FROM merge1 WHERE Val = 3 AND Val = 1;
SELECT * FROM merge1;
SELECT * FROM merge2 WHERE Val = 3 AND Val = 1;
SELECT * FROM merge3 WHERE Val = 3 AND Val = 1;
select * from merge;
SELECT * FROM merge_one_two WHERE x IN ('1');
SELECT * FROM merge_one_two WHERE x IN (1);
SELECT * FROM merge_tree_deduplication WHERE part = 33 ORDER BY key;
select * from mv_table settings additional_table_filters={'table_1' : 'x != 5'};
select * from mv_table settings additional_table_filters={'table_2' : 'x != 5'};
SELECT * FROM ngrambf_v1_hasany_test WHERE hasAny(array, ['another example', 'example.com']) ORDER BY id ASC SETTINGS force_data_skipping_indices='idx_array_ngrambf_v1';
SELECT * FROM ngrambf_v1_hasany_test WHERE hasAny(array, ['this is a test']) SETTINGS force_data_skipping_indices='idx_array_ngrambf_v1';
SELECT * FROM non_ascii;
select * from prewhere_column_missing where hash_x = intHash64(x) and length(arr) = 0;
select * from prewhere_column_missing where hash_x = intHash64(x);
SELECT * FROM remote('127.0.0.2', system.one) GLOBAL INNER JOIN ( SELECT *, t1_00850.*, t2_00850.* FROM ( SELECT toUInt8(0) AS dummy ) t1_00850 INNER JOIN ( SELECT toUInt8(0) AS dummy ) t2_00850 USING dummy ) USING dummy;
select * from remote('127.2', view(select sleep(3) from system.one)) settings receive_timeout=1, async_socket_for_remote=0, use_hedged_requests=1 format Null;
select * from remote('127.2', view(select sleep(3) from system.one)) settings receive_timeout=1, async_socket_for_remote=1, use_hedged_requests=0 format Null;
select * from remote('127.{1,2}', view(select * from system.one), dummy) format Null;
select * from remote('127.{1,2}', view(select * from system.one), identity(dummy)) format Null;
select * from remote('127.{2..11}', currentDatabase(), data_01730) group by key order by key limit 1e6 settings distributed_group_by_no_merge=2, max_memory_usage='100Mi', optimize_aggregation_in_order=1 format Null;
SELECT * FROM remote('[::1') FORMAT Null;
select * from remote('localhost', system.one) where dummy global not in system.one;
SELECT * FROM rename1;
SELECT * FROM replace FINAL ORDER BY Id, Version;
SELECT * FROM replace FINAL WHERE Version = 0 ORDER BY Id, Version;
SELECT * FROM replace ORDER BY Id, Version;
select * from system.numbers limit 5 settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};
SELECT * FROM system.numbers WHERE number NOT IN truncate_test_set LIMIT 1;
SELECT * FROM system.numbers WHERE sleepEachRow(0.05) LIMIT 10;
SELECT * FROM system.one ARRAY JOIN arrayFilter((a) -> ((a, arrayJoin([])) IN (NULL)), []) AS arr_x;
SELECT * FROM system.query_log PREWHERE ProfileEvents['Query'] > 0 and current_database = currentDatabase() LIMIT 0;
SELECT * FROM system.query_log WHERE event_date >= yesterday() AND current_database = currentDatabase() AND memory_usage > 100e6 FORMAT JSONEachRow;
SELECT * FROM t ORDER BY c SETTINGS use_query_cache = true;
SELECT * FROM t ORDER BY i;
SELECT * FROM t1 ASOF LEFT JOIN t2 ON t1.a = t2.a AND t1.b >= t2.b ORDER BY t1.b;
SELECT * FROM t1 FULL JOIN full_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 FULL JOIN t2 ON t1.id = t2.id AND 1 = 1 SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM t1 FULL JOIN t2 ON t1.id = t2.id AND 1 = 2 SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM t1 INNER JOIN (SELECT * FROM rdb) AS rdb ON rdb.key == t1.k;
SELECT * FROM t1 INNER JOIN s ON t1.k = s.k INNER JOIN t2 ON t2.x = t1.x WHERE (t1.d >= now());
SELECT * FROM t1 INNER JOIN t0 ON t1.x = t0.x ORDER BY x;
SELECT * FROM t1 JOIN t2 ON (t1.x = t2.x OR t1.x IS NULL AND t2.x IS NULL) AND t1.y <=> t2.y ORDER BY t1.x NULLS LAST;
SELECT * FROM t1 JOIN t2 ON 0;
SELECT * FROM t1 JOIN t2 ON 1 = 2;
select * from t1 join t2 on a = c;
SELECT * FROM t1 RIGHT JOIN right_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 RIGHT SEMI JOIN (SELECT * FROM rdb) AS rdb ON rdb.key == t1.k;
SELECT * FROM t1 SEMI LEFT JOIN semi_left_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 SEMI RIGHT JOIN semi_right_join j USING(x) ORDER BY x, str, s;
select * from t1 where id = 21585718595728998;
SELECT * FROM test WHERE timestamp >= '2020-10-15' ORDER BY timestamp;
SELECT * FROM test WHERE x != 'xyz';
SELECT * FROM test2 RIGHT JOIN test1 ON test2.col1 = test1.col1 WHERE test2.col1 IS NULL ORDER BY test2.col1 ;
SELECT * FROM test_collate ORDER BY x, s COLLATE 'ru';
SELECT * FROM test_collate_null ORDER BY s COLLATE 'ru';
SELECT * FROM test_collate_null ORDER BY x, s;
SELECT * FROM test_table_join_1 AS t1 FULL JOIN test_table_join_2 AS t2 ON t1.id = t2.id ORDER BY t1.id, t1.value;
SELECT * FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 AS t2 USING (id) RIGHT JOIN test_table_join_3 AS t3 USING (id) ORDER BY id, t1.value;
SELECT * FROM test_table_join_1 AS t1 RIGHT JOIN test_table_join_2 AS t2 USING (id) ORDER BY id, t1.value;
SELECT -0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
SELECT -0b1111;
SELECT -0b1_111;
SELECT -0b1_1_1_1;
SELECT -0x1.234;
SELECT -0x1.2_34p0_1;
SELECT -0x1.2_3_4;
select -16 as offset, 16 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -16 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT -199 % toFloat64(200) as k, toTypeName(k);
SELECT -1::Int32;
select -9 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -_1;
SELECT -a, sum(c), avg(d) FROM pk_order GROUP BY -a ORDER BY -a;
SELECT -inf;
SELECT -Inf;
SELECT -INF;
select -interval 23 hour;
SELECT -materialize((1, 2, 3));
SELECT -nan = toUInt8(0), -nan != toUInt8(0), -nan < toUInt8(0), -nan > toUInt8(0), -nan <= toUInt8(0), -nan >= toUInt8(0);
SELECT -number % -9223372036854775808 FROM system.numbers;
SELECT -number IN (1, 2, 3, -5.0, -2.0) FROM system.numbers LIMIT 10;
SELECT -number y, toInt128(number) + y, toInt256(number) + y, toUInt256(number) + y FROM numbers_mt(10) ORDER BY number;
SELECT -tuple(1);
SELECT -tuple(NULL, * * 2, *) FROM numbers(2);
SELECT /* # hello */ 1;
select /* test=01531, enable_global_with_statement=0 */ 2;
select /* test=01531, enable_global_with_statement=1 */ 2;
SELECT /*/**/*/ 1;
SELECT /*a/*b*/c*/ 1;
SELECT /*ab/*cd*/ef*/ 1;
select 0 = isValidUTF8('\x80') from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xf8\x90\x80\x80\x80', 5)) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abcdef'), materialize(['a......'])) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abcd'), ['cdefgh']);
select 0 = multiSearchFirstIndexUTF8(materialize('щщвфчгамтжашнуошбзшуйчтшх'), ['дийу', 'жеомлсжщймемрсччошдфажцтдп', 'нгопнцквбф', 'хопб', 'ив', 'чвфвшфрдфелрдбтатшвейтг', 'вхкцадмупдчбаушшлдксйв', 'жтжбсвмшшсйеуфдпбдлкквдиовж', 'гтсдолснхесйцкйкмищгсзедх', 'ошплп', 'ифпуррикбопйгиччи', 'чдфймудаибвфчжтзглс', 'зпцмвпнлтунвйж', 'еждрйитхччещлцч', 'вмофсужхгрнзехкх', 'щжгквкрфжмжжсефпахст']) from system.numbers limit 10;
SELECT 0 ? (number, toString(number)) : (number * 10, concat('! ', toString(number))) FROM system.numbers LIMIT 10;
SELECT 1 + x FROM tab where plus(1, x) <= toDateTime('2022-02-02') + 2 order by x;
SELECT 1 + x FROM tab where plus(1::Nullable(UInt8), x) <= 2 order by x;
SELECT 1 + x FROM tab where plus(1::Nullable(UInt8), x) <= toDateTime('2022-02-02') + 2 order by x;
SELECT 1 + yesterday() = today();
SELECT 1 / 10;
SELECT 1_2_3_4;
select 2 = sequenceCount('(?1)(?1)(?1)(?1)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
SELECT 3 == count() FROM (SELECT toLowCardinality(toNullable(number)) AS l FROM system.numbers LIMIT 3) AS s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(number)) AS r FROM system.numbers LIMIT 4) AS s2 ON l = r ;
SELECT 3 as nelems, [[1,2],[-10,-20],[10,20],[0,0],[-1.5,1]] as arr, arrayResize(arrayPartialSort(nelems, arr), nelems), arrayResize(arrayPartialReverseSort(nelems, arr), nelems), arrayResize(arrayPartialSort((x) -> arraySum(x), nelems, arr), nelems);
SELECT 3_4e2_1;
SELECT @@max_allowed_packet FORMAT CSVWithNames;
SELECT @@Version FORMAT CSVWithNames;
SELECT [ 0 ];
select [0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 15, 0, 1, 7, 0] = multiSearchAllPositionsCaseInsensitive(materialize('nxwotjpplUAXvoQaHgQzr'), ['ABiEhaADbBLzPwhSfhu', 'TbIqtlkCnFdPgvXAYpUuLjqnnDjDD', 'oPszWpzxuhcyuWxiOyfMBi', 'fLkacEEeHXCYuGYQXbDHKTBntqCQOnD', 'GHGZkWVqyooxtKtFTh', 'CvHcLTbMOQBKNCizyEXIZSgFxJY', 'PlUAxVoQah', 'zrhYwNUzoYjUSswEFEQKvkI', 'c', 'NXWOt', '', 'qAhG', 'JNqCpsMJfOcDxWLVhSSqyNauaRxC', '', 'PpLuaxV', 'DLITYGE']) from system.numbers limit 10;
select [1, 0, 7, 1, 0, 24, 17, 0, 0, 0, 2, 0, 1, 7, 4, 1, 12, 8] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('гГБаДнФбпнЩврЩшЩЩМщЕБшЩПЖПчдт'), ['', 'таОХхрзИДжЛСдЖКЧжБВЩжЛкКХУКждАКРеаЗТгч', 'Ф', '', 'ЙЩИФМфАГщХзКЩЧТЙжмуГшСЛ', 'ПЖпчдТ', 'ЩМщЕбшЩПжПч', 'ФгА', 'гУД', 'зУцкжРоППЖчиШйЗЕшаНаЧаЦх', 'гбаДНФбПНЩВРЩШЩщМЩеБшЩпжПЧд', 'РДЧЖАбрФЦ', 'гГ', 'ФбпНщвр', 'адНфБПнщвРщШщщМщЕбШщ', 'ггб', 'ВРЩ', 'бПНщврЩш']) from system.numbers limit 10;
select [1, 1, 2, 3, 4, 0, 0, 0, 0, 0] = groupArray(position('aaaa', materialize('a'), number)) from numbers(10);
SELECT [1, 2, 3, 11] = arraySort(multiMatchAllIndices(materialize('фабрикант'), materialize(['', 'рикан', 'а', 'f[ae]b[ei]rl', 'ф[иаэе]б[еэи][рпл]', 'афиукд', 'a[ft],th', '^ф[аиеэ]?б?[еэи]?$', 'берлик', 'fab', 'фа[беьв]+е?[рлко]'])));
select [1, 6, 0, 1, 0, 0, 3, 1, 2, 0] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('МФННЧйОнцЛИЧЕПШПЧйоГФО'), ['', 'йОн', 'шУлгИЛЛРЙАсфЗоИЙЗРхуПбОЙсшдхо', 'МФННчЙоНц', 'лзВжбЦзфкзтуОйзуЗ', 'ЖГДщшЦзсжщцЦЖеЧвРфНИНОСАОщг', 'ННчйОНЦлИчЕПШ', '', 'Ф', 'ЩрИдНСлЙуАНЗвЕчмчАКмФУипндиП']) from system.numbers limit 10;
SELECT [[[[],[]]]];
SELECT [[], []]::Array(Array(UInt32));
select [toUInt8(255)] in [-1];
select [tuple(-4741124612489978151, 1), tuple(-3236599669630092879, 2), tuple(560747512943180768, 3)];
select a, b, c from (select 42 as a, 1 as b, 2 as c, 1 as b, 2 as c) any left join (select 42 as a, 3 as d) using a;
SELECT a, b, c FROM buffer_00126 ORDER BY a, b, c;
SELECT a, b, sum(s), count() from rollup ORDER BY a, b;
SELECT a, b, sum(s), count() from rollup WITH TOTALS ORDER BY a, b;
select abs(-128) = 128;
select abs(greatCircleDistance(83.089598, 54.842461, 37.617780, 55.755830) - 2837839.72863) / 2837839.72863 < 0.004;
select abs(log(e()) - 1) < 1e-8;
select abs(pow(cosh(1), 2) - pow(sinh(1), 2) - 1) < 1e-6;
select abs(sinh(1) - 0.5 * (e() - exp(-1))) < 1e-6;
SELECT abs(sum(1e100) - 1e100 * 1000) > 1 FROM (SELECT * FROM system.numbers LIMIT 1000);
select abs(tan(pi() / 4) - 1) < 1.0e-9;
SELECT AccountID FROM ( SELECT AccountID, Currency FROM Accounts LIMIT 2 BY Currency );
select accurateCast('0', 'Bool');
select accurateCast('false', 'Bool');
SELECT accurateCastOrDefault(number + 127, 'Int8') AS x, accurateCastOrDefault(number + 127, 'Int8', toInt8(5)) AS x_with_default FROM numbers (2) ORDER BY number;
SELECT accurateCastOrNull(nan, 'UInt64');
SELECT accurateCastOrNull(number + 127, 'Int8') AS x FROM numbers (2) ORDER BY x;
select acosh(1) = 0;
SELECT action, user FROM null_lc_set_index WHERE user = 'alice';
SELECT ADDDATE(materialize('2022-05-07'::Date), INTERVAL 5 MINUTE);
SELECT addDays('2023-10-22', 1), addDays('2023-10-22 12:34:56.123', 1);
select addHours(x1, 1) from t1;
SELECT addInterval(tuple(INTERVAL 1 SECOND), INTERVAL 1 SECOND);
select addMicroseconds(toDateTime64('1980-12-12 12:12:12.123456', 6), 1);
SELECT addMilliseconds('2023-10-22', 1), addMilliseconds('2023-10-22 12:34:56.123', 1);
SELECT addMinutes(materialize('2023-10-22'), materialize(1)), addMinutes(materialize('2023-10-22 12:34:56.123'), materialize(1));
SELECT addMonths(toTimeZone(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata'), 1);
select addMonths(x1, 1) from t1;
select addNanoseconds(toDateTime64('1980-12-12 12:12:12.123456789', 9), 1);
select addQuarters(x1, 1) from t1;
select addSeconds(x1, 3600) from t1;
SELECT addTupleOfIntervals('2022-10-11'::Date, tuple(INTERVAL 1 DAY));
SELECT addWeeks(toDateTime('2020-01-01 00:00:00', 'GMT'), 9223372036854775807);
select addWeeks(x1, 1) from t1;
SELECT addYears(materialize('2023-10-22'), 1), addYears(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addYears(toDateTime('2020-01-01 00:00:00', 'GMT'), 9223372036854775807);
select addYears(x1, 1) from t1;
SELECT aes_encrypt_mysql('aes-256-ecb', CAST(null as Nullable(String)), 'test_key________________________');
SELECT age('day', materialize(toDate('2015-08-18', 'UTC')), materialize(toDate32('2015-08-19', 'UTC')), 'UTC');
SELECT age('week', toDateTime64('2015-01-01 20:30:36.200101', 6, 'UTC'), toDateTime64('2015-01-15 20:30:36.200100', 6, 'UTC'));
SELECT age('year', toDate('2017-12-31'), toDate('2018-01-01'));
SELECT age('year', toDate32('1927-01-01', 'UTC'), toDate32('1928-01-01', 'UTC'), 'UTC');
SELECT analysisOfVariance(number, number % 2) FROM numbers(10) FORMAT Null;
SELECT anyIf('Hello', arrayJoin([1, NULL]) = 0) FROM remote('127.0.0.{1,2}', system.one);
SELECT anyIf('Hello', arrayJoin([1, NULL]) = 0);
SELECT anyIf(toNullable('Hello'), arrayJoin([0, 1]) = 0);
-- FIXME no documention
-- SELECT anyOrNull(number) RESPECT NULLS from numbers(0);
select appendTrailingCharIfAbsent('', 'a') = '';
select appendTrailingCharIfAbsent('a', 'a') = 'a';
SELECT argMax((n, n), n) t, toTypeName(t) FROM (SELECT if(number % 3 = 0, NULL, number) AS n from numbers(10));
SELECT argMinIf(number, now() + number, number % 10 > 20) FROM (Select number as number from numbers(10, 10000)) settings max_threads=1, max_block_size=20000;
SELECT argMinIf(number, number::Float64, number > 2030) from numbers(2029);
SELECT argMinIf(number, number::Float64, number > 2030) from numbers(2032);
SELECT arr FROM t_json_array ARRAY JOIN arr ORDER BY arr.k1 FORMAT JSONEachRow;
SELECT arr, [1,2] AS other, round(arrayJaccardIndex(arr, other), 2) FROM array_jaccard_index ORDER BY arr;
SELECT arrayAll(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayAUC([0, 0, 1], [0, 1, 1]);
SELECT arrayCumSum(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayCumSumNonNegative(c) FROM test;
SELECT arrayDifference( cast([10, 1], 'Array(UInt16)'));
SELECT arrayDistinct(materialize([[0], [0]])) FROM numbers(2);
SELECT arrayDotProduct([12, 2.22, 302], [1.32, 231.2, 11.1]);
SELECT arrayElement(['a',NULL,'c','d'], 2);
SELECT arrayEnumerateUniqRanked(x, 2) FROM VALUES('x Array(Array(String))', ([[]]), ([['a'], ['a'], ['b']]), ([['a'], ['a'], ['b']]));
SELECT arrayExists(date -> (date = '2022-07-31'), [toDate('2022-07-31')]) AS date_exists;
SELECT arrayExists(x -> ((x.1) = 'pattern'), cast([tuple('a', 1)] as Array(Tuple(LowCardinality(String), UInt8))));
SELECT arrayExists(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFill(x -> x < 10, [1, 2, 3, 11, 12, 13, 4, 5, 6, 14, 15, 16]);
SELECT arrayFilter((a) -> ((a, arrayJoin([[]])) IN (Null, [Null])), []);
SELECT arrayFilter(x -> x = 'hello', ['']) FROM system.one ARRAY JOIN [0] AS elem WHERE NOT ignore(elem) AND arrayExists(x -> x = 'hello', ['']);
select arrayFilter(x -> x = (toInt16(3), toInt16(3)), arrayZip([toUInt8(3)], [toUInt8(3)]));
SELECT arrayFirst(x -> x >= 2, materialize([1, 2, 3]));
SELECT arrayFirstIndex(x -> 0, [1, 2, 3]);
SELECT arrayFirstIndex(x -> 0, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFirstOrNull((x,f) -> f, [1,2,3,NULL], [0,0,0,1]);
SELECT arrayFlatten([[[1, 2, 3], [4, 5]], [[6], [7, 8]]]);
SELECT arrayFlatten([]);
SELECT arrayFlatten(arrayJoin([[[[]], [[1], [], [2, 3]]], [[[4]]]]));
SELECT arrayFold( acc,x -> (arrayPushFront(acc.1, x),arrayPushBack(acc.2, x)), [1, 2, 3, 4], (emptyArrayInt64(), emptyArrayInt64()));
SELECT arrayFold(acc, x -> arrayIntersect(acc, x), [['qwe', 'asd'], ['qwe','asde']], []);
select arrayIntersect([(1, ['a', 'b']), (Null, ['c'])], [(2, ['c', Null]), (1, ['a', 'b'])]);
SELECT arrayJoin(['1.1.1.1', '255.255.255.255']) AS x, toIPv4(x) AS y, toUInt32(y) AS z FORMAT PrettyCompactNoEscapes;
SELECT arrayJoin(['ґ', 'ї', 'І', 'Б']) as x ORDER BY x;
SELECT arrayJoin([(k1, v), (k2, v)]) AS row, row.1 as k FROM t FINAL WHERE k1 != 3 AND k = 1 ORDER BY row SETTINGS enable_vertical_final = 1;
SELECT arrayJoin([0, 1, 3, NULL]) AS x, x = 0, if(x = 0, 'x=0', 'x<>0') ORDER BY x;
SELECT arrayJoin([0, 1, 3, NULL]) AS x, x = 0, if(x = 0, 'Definitely x = 0', 'We cannot say that x = 0');
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%elloworl%';
SELECT arrayLast(x -> 0, [1, 2, 3]);
SELECT arrayLastIndex(x -> 0, emptyArrayUInt8());
SELECT arrayLastIndex(x -> 0, materialize([1, 2, 3]));
SELECT arrayLastOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,0]);
SELECT arrayMap((x -> concat(concat(toString(x), '_'), toString(id))) as lambda, [1,2,3]) FROM test_table;
SELECT arrayMap(x -> toString(x), range(number))[2 - number] FROM system.numbers LIMIT 10;
SELECT arrayMax([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
SELECT arrayMax(x) FROM test_aggregation;
SELECT arrayMin([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
SELECT arrayMin(x) FROM test_aggregation;
SELECT arrayPartialShuffle(['storage','tiger','imposter','terminal','uniform','sensation'], 0, 0xbad_cafe);
SELECT arrayPartialShuffle(['storage','tiger','imposter','terminal','uniform','sensation'], 3, 0xbad_cafe);
SELECT arrayPartialSort([1,2,3]);
select arrayPopBack(['a', 'b', 'c']);
select arrayPopBack([0.1, 0.2, 0.3]);
select arrayPopFront([1]);
select arrayPopFront(emptyArrayUInt8());
select arrayPopFront(Null);
SELECT arrayProduct([1,2,3,4,5,6]) as a, toTypeName(a);
SELECT arrayProduct([toDecimal64(1,8), toDecimal64(2,8), toDecimal64(3,8)]) as a, toTypeName(a);
select arrayPushBack([0.5, 0.7], 1);
select arrayPushBack([1, 2, 3], l) from array_functions;
select arrayPushFront([Null], 1);
SELECT arrayPushFront(a, toDecimal32(0, 4)) AS x, toTypeName(x) FROM decimal;
SELECT arrayReduce('avgOrDefault', [1]);
SELECT arrayReduce('avgOrDefault', [toDecimal128(-123.45, 2)]);
select arrayReduceInRanges('uniqStateForEachMapForEach', [(1, 3), (2, 3), (3, 3)], [[map(1, ['a'])], [map(1, ['b'])], [map(1, ['c'])], [map(1, ['d'])], [map(1, ['e'])]]);
select arrayReduceInRanges('uniqStateMap', [(1, 3), (2, 3), (3, 3)], [map(1, 'a'), map(1, 'b'), map(1, 'c'), map(1, 'd'), map(1, 'e')]);
select arrayResize(['a', 'b', 'c'], 5);
select arrayResize([1, 2, 3, 4, 5, 6], -3);
SELECT arrayReverseFill(x -> x < 10, [1, 2, 3, 11, 12, 13, 4, 5, 6, 14, 15, 16]);
SELECT arrayReverseSort(number % 2 ? emptyArrayUInt64() : range(number)) FROM system.numbers LIMIT 10;
SELECT arrayReverseSplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]);
select arrayRotateLeft(['H', 'e', 'l', 'l', 'o'], 2);
select arrayShiftRight(a, s, d) from t02845;
select arrayShiftRight(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000);
SELECT arrayShuffle(1);
SELECT arrayShuffle(['storage','tiger','imposter','terminal','uniform','sensation'], 0xbad_cafe);
select arraySlice(materialize([1, 2, 3, 4, 5, 6, 7, 8]), materialize(-2), materialize(-2));
SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]);
SELECT arraySort(arrayIntersect(['a', 'b', 'c'], ['a', 'a']));
SELECT arrayStringConcat(arrayMap(x -> toString(x), range(number)), '') FROM system.numbers LIMIT 10;
SELECT arraySum([-9000000000000000000, -9000000000000000000]);
SELECT arrayZip([1, number, number * number], [[], [], []]) FROM numbers(10);
SELECT avg(i8 * i16) FROM test_01035_avg;
SELECT avgWeighted(if(number < 50, NULL, number), if(number < 50, NULL, number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(number, number, toNullable(number % 10)) t, toTypeName(t) FROM numbers(1000);
SELECT basename('C:\\\\Users\\Documents\\test_file');
select bin('');
select bin('0');
SELECT bitAnd(0, inf);
SELECT bitCount('clickhouse cloud');
SELECT bitCount(-1);
SELECT bitHammingDistance('hello', 'hello');
SELECT bitmapAndCardinality(bitmapBuild([100, 200, 500]), bitmapBuild(CAST([100, 200], 'Array(UInt16)')));
select bitmapContains(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]),toUInt32(101));
select bitmapHasAll(bitmapXor(bitmapBuild([1,7]), bitmapBuild([5,7,9])), bitmapBuild([1,5,7]));
select bitmapHasAny(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]),bitmapBuild([ 99, 101, 600]));
SELECT bitmapMax(bitmapBuild(emptyArrayUInt16()));
SELECT bitmapMin(bitmapBuild(emptyArrayUInt16()));
SELECT bitmapOrCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]));
SELECT bitmapToArray(bitmapAnd(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])));
SELECT bitmapXorCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]));
SELECT CASE 1 WHEN 0 THEN 'ZERO' WHEN 1 THEN 'ONE' ELSE 'NONE' END AS result;
SELECT CASE 1 WHEN 0 THEN NULL WHEN 1 THEN 'ONE' ELSE 'NONE' END AS result;
SELECT CASE 1 WHEN 1 THEN 2 END;
SELECT CASE 1 WHEN FALSE THEN 1 ELSE CASE WHEN 1 THEN 1 - (CASE 1 WHEN 1 THEN 1 ELSE 1 END) END % 1 END;
select case 1.1 when 0.1 then 'a' when 1.1 then 'b' when 2.1 then 'c' else 'default' end as f;
select case 1::Nullable(Int32) when 1 then 123 else 0 end;
SELECT CASE col1 WHEN 0 THEN 1 WHEN 1 THEN 2 ELSE 3 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE x WHEN 1 THEN 'hello' WHEN 2 THEN 'world' ELSE 'unknow' END FROM mergetree_00609;
SELECT cast('' , 'IPv6');
select CAST('', 'FixedString(1000)');
SELECT cast('0' as Nullable(DateTime64(3, 'UTC')));
SELECT CAST('1', 'Bool');
SELECT CAST('1.1' AS Decimal(10, 5));
SELECT CAST('1.1234511111' AS Decimal(10, 5));
SELECT CAST('42' AS DOUBLE PRECISION), CAST(42, 'NATIONAL CHARACTER VARYING'), CAST(-1 AS tinyint UnSiGnEd), CAST(65535, ' sMaLlInT signed ');
SELECT CAST('hello' AS FixedString(5)) LIKE '%he%o%';
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE x IN ('0', '1');
SELECT cityHash64(map(), CAST(materialize('') AS LowCardinality(Nullable(String))));
SELECT coalesce(materialize(NULL), materialize(NULL)) as x, toTypeName(x);
SELECT coalesce(NULL);
SELECT coalesce(NULL, 1);
SELECT coalesce(NULL, toNullable(materialize(2))) as x, toTypeName(x);
SELECT coalesce(NULL, toNullable(toDecimal32(8, 0))), coalesce(NULL, toNullable(toDecimal64(8, 0))), coalesce(NULL, toNullable(toDecimal128(8, 0)));
SELECT coalesce(number % 2 = 0 ? number : NULL, number % 3 = 0 ? number : NULL, number % 5 = 0 ? number : NULL) AS res, toTypeName(res) FROM system.numbers LIMIT 15;
select concat('a', 'b') == 'ab';
select concat('a', 'b', materialize('c')) == 'abc' from system.numbers limit 5;
select concat('a', toFixedString('b', 1), toFixedString('c', 1)) == 'abc';
SELECT concat('foo');
SELECT concat('Hello, ', unhex('a0'), ' World') AS s1, concat('Hello, ', unhex('a0')) AS s2, concat(unhex('a0'), ' World') AS s3 FORMAT JSONCompact;
select concat(materialize('a'), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1), toFixedString('c', 1)) == 'abc';
SELECT concat(NULL);
SELECT concat(NULL, materialize(NULL :: Nullable(UInt64)));
SELECT concat(NULL, NULL);
SELECT CONCAT(number > 5 ? 'censor.net' : 'google', '1') FROM system.numbers LIMIT 10;
select concat(toFixedString('a', 1), 'b') == 'ab' from system.numbers limit 5;
SELECT constant_false ? then_non_constant_nullable : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_null ? then_non_constant_nullable : constant_null AS res FROM nullable_00431;
SELECT count() == 0 FROM (SELECT '33.3' :: Decimal(9, 1) AS a WHERE a IN ('33.33' :: Decimal(9, 2)));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i16, 100);
SELECT count() FROM uuid WHERE id <= '00000000-0000-03f8-9cb8-cb1b82fb3900';
SELECT COUNT(*) FROM zero_rows_per_granule FINAL;
SELECT countDigits(-1);
SELECT countDigits(-123.45678901::Decimal256(8));
SELECT countIf(explain like '%Algorithm: DirectKeyValueJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN actions = 1 SELECT s FROM (SELECT toUInt64(9911) id) t1 INNER JOIN dict t2 USING (id) );
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 9, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 9, 0);
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%S'), DATE_FORMAT(toDate32('2018-01-02'), '%S');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%t'), DATE_FORMAT(toDate32('2018-01-02'), '%t');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%T'), DATE_FORMAT(toDate32('2018-01-02'), '%T');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%W'), DATE_FORMAT(toDate32('2018-01-02'), '%W');
SELECT DATE_SUB(DATE '2022-01-01', INTERVAL 1 YEAR);
SELECT DATE_SUB(YEAR, 1, DATE '2022-01-01');
SELECT date_trunc('quarter', toDateTime('2020-01-01 20:11:22', 'Europe/London'), 'Asia/Tokyo');
SELECT dateDiff('day', toDate('2017-12-31'), toDate('2017-01-01'));
SELECT dateDiff('hour', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), toDateTime64('1927-01-01 10:00:00', 3, 'UTC'));
SELECT dateDiff('minute', toDate('2017-12-31'), materialize(toDate('2017-01-01')), 'UTC');
SELECT dateDiff('minute', toDate('2017-12-31'), toDate('2016-01-01'), 'UTC');
select deltaSumTimestamp(value, timestamp) from (select number as timestamp, [0, 4, 8, 3, 0, 0, 0, 1, 3, 5][number] as value from numbers(1, 10));
SELECT dictGet('02185_range_dictionary', 'value', 0, 0);
SELECT dictGet('complex_key_cache_dictionary_01862', 'value', (toUInt64(1), 'FirstKey')) FORMAT Null;
SELECT dictGet('complex_key_hashed_dictionary_01862', 'value', (toUInt64(1), 'FirstKey')) FORMAT Null;
SELECT dictGet('complex_key_hashed_dictionary_01862', 'value', (toUInt64(2), 'FirstKey')) FORMAT Null;
SELECT dictGet('ip_trie_dictionary', 'decimal_value', tuple(IPv4StringToNum('127.0.0.0')));
SELECT dictGet('ip_trie_dictionary', 'value', tuple(IPv4StringToNum('127.0.0.0')));
SELECT dictGet('ip_trie_dictionary_01862', 'value', tuple(toIPv4('1.1.1.1'))) FORMAT Null;
SELECT dictGet('ip_trie_dictionary_01862', 'value', tuple(toIPv4('127.0.0.1'))) FORMAT Null;
SELECT dictGet('null_ip_dict', 'val', toIPv4('127.0.0.1'));
SELECT dictGetHierarchy('01778_db.hierarchy_cache_dictionary', number) FROM system.numbers LIMIT 6;
select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(blockSize()=0)) as x);
SELECT dictHas('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
SELECT dictHas('01766_db.hashed_dictionary_complex_key_complex_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
SELECT dictIsIn('01778_db.hierarchy_cache_dictionary', number, number) FROM system.numbers LIMIT 6;
SELECT distinct(marks) from system.parts WHERE table = 'zero_rows_per_granule2' and database=currentDatabase() and active=1;
select endsWith([], [NULL]);
select endsWith([NULL, 1], [NULL]);
select exp2(1) = 2;
select format('{}{}{}', materialize('a'), 'b', toFixedString('c', 1)) == 'abc';
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%t'), formatDateTime(toDate32('2018-01-02'), '%t');
SELECT formatQuerySingleLine('');
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 30.5 * 86400 + 365 * 86400));
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%r'), FROM_UNIXTIME(toDate32('2018-01-02'), '%r');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'C', 'UTC');
SELECT fs, replaceAll(fs, '\0', '*') FROM replaceall ORDER BY fs ASC;
SELECT geohashesInBox(materialize(1.), 2., 3., 4., 2);
select identity((1, 2)) in ((1, 2), (3, 4));
SELECT if(1 = 1, toNullable(toUInt8(0)), NULL) AS x, toTypeName(x);
select if(number % 2, toLowCardinality(number), toLowCardinality(number + 1)) from numbers(2);
SELECT intDiv(materialize(1), CAST(materialize(NULL), 'Nullable(Decimal(7, 2))'));
SELECT INTERVAL 2 months;
SELECT isDecimalOverflow(toNullable(toDecimal32(42, 0)), 1), isDecimalOverflow(materialize(toNullable(toDecimal32(42, 0))), 2), isDecimalOverflow(toNullable(toDecimal64(42, 0)), 1), isDecimalOverflow(materialize(toNullable(toDecimal64(42, 0))), 2), isDecimalOverflow(toNullable(toDecimal128(42, 0)), 1), isDecimalOverflow(materialize(toNullable(toDecimal128(42, 0))), 2);
SELECT item_id FROM (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) l INNER JOIN (SELECT item_id FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id) r USING (item_id);
select javaHash(toInt32(123));
SELECT joinGet('join_tbl', 'lcname', 'xxx') == 'yyy';
select JSON_ARRAY_LENGTH('[1,2,3,4,5]');
SELECT JSON_EXISTS('', '$');
SELECT JSON_QUERY('{"hello":true}', '$.hello');
SELECT JSON_QUERY('{"hello":{"world":"!"}}', '$.hello');
SELECT JSON_VALUE('{"1key":1}', '$..1key');
SELECT JSON_VALUE('{hello:world}', '$.hello');
select JSONArrayLength('');
SELECT least('hello');
select LEFT('foo', 123);
SELECT left('Hello', number) FROM numbers(10);
SELECT mapApply();
select mapApply(k, v -> (k, arrayMap(x -> mapApply(k, v -> (k, arrayMap(x -> finalizeAggregation(x), v)), x), v)), x) from test;
select mapContains(a, 'abc') from table_map;
select mapFromArrays(materialize(['aa', 'bb']), [4, 5]) from numbers(2);
SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'abc,def,zzz');
SELECT max(length(x)) FROM parallel_replicas_plain FORMAT Null;
SELECT maxArray(sketch) FROM data;
SELECT maxForEach(sketch) FROM data;
SELECT maxIf(number, rand() % 2 == 3) from numbers(10) settings max_threads=1, max_block_size=5;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiMatchAny('goodbye', ['^hello[, ]+world$', 'go+d *bye', 'w(or)+ld']);
SELECT multiMatchAny('Hallo Welt', ['.{51}']);
SELECT multiplyDecimal(toDecimal32(123.123, 3), toDecimal128(0, 1));
SELECT multiplyDecimal(toDecimal32(123.123, 3), toDecimal128(11.4, 1), 2);
SELECT name FROM system.databases WHERE name = {new_db_name:String};
SELECT NaN;
SELECT normalizedQueryHash('SELECT 1 AS xyz111') = normalizedQueryHash('SELECT 2 AS xyz234');
SELECT notEmpty(toIPv6('::1'));
SELECT notEmpty(toUUID('00000000-0000-0000-0000-000000000000'));
SELECT notIn([['']], [[NULL]]);
SELECT now() + 1::Int128;
SELECT now() + INTERVAL 1::UInt256 SECOND - now();
SELECT now() = current_timestamp();
select now64(10);
SELECT nowInBlock('UTC', 'UTC');
select parseDateTimeInJodaSyntax('7 ', 'DD ', 'UTC') = toDateTime('2000-01-07', 'UTC');
select positionUTF8('' as h, lowerUTF8('аБв' as n)) = positionCaseInsensitiveUTF8(h, n);
SELECT quantiles(0.5)(now()::DateTime('UTC')) WHERE 0 WITH TOTALS;
SELECT res FROM (SELECT arrayJoin(x) AS res FROM (SELECT [1, 2, 3] AS x UNION ALL SELECT [nan, NULL]) ORDER BY res) ORDER BY res DESC;
SELECT reverse([toFixedString('Hello', 5), NULL]);
SELECT reverse(arrayMap(x -> toString(round(exp10(x))), range(number))) FROM system.numbers LIMIT 10;
SELECT roundAge(56);
SELECT sign(n3) FROM test;
SELECT simpleJSONExtractString('{"myparam":"test\\"string"}', 'myparam');
SELECT simpleJSONExtractString('{"myparam":"test_string"}', 'myparam');
select sin(pi() / 4) = 1 / sqrt(2);
select sleep(1) format Null;
SELECT sparkbar(10)(number, -number) FROM numbers(toUInt64(9223372036854775807), 7) FORMAT Null;
SELECT sumOrNull(n) FROM defaults;
SELECT SVG([[[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]], [[(-10., -10.), (-10, -9), (-9, 10)]]], s) FROM geo ORDER BY id;
select t from tab where t > '2020-01-01 01:01:01';
SELECT t.* FROM system.one t;
select t.*, s.* from t right join s on (s.a = t.a and s.b = t.b);
select t.a, t.a as t_a, s.a, s.a as s_a, y.a, y.a as y_a from t left join s on t.a = s.a left join y on y.b = s.b order by t.a, s.a, y.a;
select t.a, t.a, t.b as t_b from t left join s on t.a = s.a left join y on y.b = s.b order by t.a format PrettyCompactNoEscapes;
SELECT t.num, t.str FROM null_02902;
SELECT t.number FROM numbers(2) t;
SELECT t.s FROM sparse_tuple ORDER BY id LIMIT 5;
SELECT t.x, l.s, r.s, toTypeName(l.s), toTypeName(r.s) FROM nr AS l RIGHT JOIN t AS r USING (x) ORDER BY t.x;
select t1.* from t1_all t1 join t2_all t2 on t1.a = t2.a ORDER BY t1.a;
SELECT t1.*, t1.dt, t2.*, t2.dt FROM t1 JOIN t2 ON t1.foo = t2.bar WHERE t2.dt >= '2020-02-01';
SELECT TIMESTAMP('2013-12-31');
SELECT timestamp();
SELECT toBool('y');
SELECT toBool('yes');
SELECT toBool(-10000000000);
SELECT toBool(0);
SELECT toBool(100000000000);
SELECT toDate('2015-02-03') >= '2015-02-04';
SELECT toDateTime64('2011-11-11 11:11:11.111111111111111111111', 0);
SELECT today() = current_DATE();
SELECT today() = toDate(now());
SELECT today() AS a ORDER BY a ASC WITH FILL FROM now() - toIntervalMonth(1) TO now() + toIntervalDay(1) STEP 82600;
SELECT today() IN (toDate('2014-01-01'), toDate(now()));
SELECT toDayOfMonth(toDateTime(1412106600), 'Pacific/Pitcairn');
select toDayOfMonth(x1) from t1;
SELECT toDayOfWeek('invalid');
SELECT toDecimal256(1.555,3) IN (1.5551,1.555000);
SELECT toTypeName(bitCount(1::UInt256));
SELECT toTypeName(x) FROM (SELECT toDecimal64('12345.00', 4) AS x UNION ALL SELECT toUInt16(0) AS x) WHERE x = 0;
select toUUID('f82aef31-279e-431f-8b00-2899ad387aea')::UInt128;
select transform(5, [1,2], ['a','b'], 'c');
SELECT trim(BOTH 'a' AS arg_1 FROM 'abca' AS arg_2), arg_1, arg_2;
SELECT TRIM(BOTH 'af' FROM 'abcdef');
SELECT trim(explain) == 'Asterisk' FROM (EXPLAIN AST SELECT * FROM system.numbers LIMIT 10) WHERE explain LIKE '%Asterisk%';
select trim(LEADING '*[]{}|\\' FROM '\\|[[[}}}*foo*');
select tuple(number) <= tuple(materialize(toUInt64OrNull(''))) from numbers(1);
SELECT tupleElement(number, 1) FROM numbers(1);
SELECT tupleToNameValuePairs(tuple(1, 1.3));
SELECT tupleToNameValuePairs(tuple(1, 2, 3));
SELECT tv.key, toString(tv.t, 'UTC'), md.bid, tv.tv, md.ask FROM tv ASOF LEFT JOIN md USING(key,t) ORDER BY (tv.key, tv.t);
SELECT tx.id, tx.value, m.name FROM transaction tx ANY LEFT JOIN master m ON m.id = tx.master_id ORDER BY tx.id;
SELECT type FROM system.columns WHERE table = 'decimal' AND database = currentDatabase() ORDER BY type;
SELECT type FROM system.parts_columns WHERE table = 't_json_wide_parts' AND database = currentDatabase() AND active;
SELECT uniq((x, arrayMap(elem -> [elem, elem], x))) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT untuple(tuple(1)::Tuple(Int)), untuple(tuple('s')::Tuple(String)) SETTINGS allow_experimental_analyzer = 0 FORMAT Vertical;
select user, windowFunnel(86400, 'strict_order')(dt, event='a', event='b', event='c') as s from funnel_test_strict_order group by user order by user format JSONCompactEachRow;
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedSum(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT WIDTH_BUCKET(3, 3, high, count) FROM mytable WHERE count != 0;
SELECT wkt([[[(0., 0.), (10., 0.), (10., 10.), (0., 10.)], [(4., 4.), (5., 4.), (5., 5.), (4., 5.)]], [[(-10., -10.), (-10., -9.), (-9., 10.)]]]);
SELECT x FROM primary_key ORDER BY x;
SELECT x FROM primary_key WHERE -x < -1 ORDER BY x;
SELECT Y, uniqTheta(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
select Y.*, s.* from Y inner join (select * from Y) as s on concat('n', Y.y_a) = s.y_b order by Y.id, Y.y_a, Y.y_b, s.id, s.y_a, s.y_b;
select Y.*, s.* from Y left join (select * from Y) as s on concat('n', Y.y_a) = s.y_b order by Y.id, Y.y_a, Y.y_b, s.id, s.y_a, s.y_b;
select y.a, y.a, y.b as y_b, y.b from t left join s on s.a = t.a left join y on y.b = s.b order by t.a format PrettyCompactNoEscapes;
SELECT YYYYMMDDToDate32(toDecimal64(22991231.1, 5));
SELECT YYYYMMDDToDate32(toDecimal64(23000101.1, 5));
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSSSSSS', 'UTC');
WITH (1, 2) AS t SELECT t.1, t.2;
WITH (1,2,3) || ('a','b','c') || ('2020-10-08'::Date, '2020-11-08'::Date) AS t SELECT t, t.1, t.2, t.3, t.4, t.5, t.6, t.7, t.8;
WITH (1.0, 0.0) AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab ORDER BY L2Distance(vec, reference_vec) LIMIT 1;
WITH (9000.0, 0.0) AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab ORDER BY L2Distance(vec, reference_vec) LIMIT 1;
WITH (d < '2018-01-01') AND (d < '2018-01-02') AS x SELECT 1 FROM t WHERE x;
WITH (functor, x) -> functor(x) AS lambda, x -> x + 1 AS functor_1, x -> toString(x) AS functor_2 SELECT lambda(functor_1, 1), lambda(functor_2, 1);
WITH (functor, x) -> functor(x) AS lambda, x -> x + 1 AS functor_1, x -> toString(x) AS functor_2 SELECT lambda(functor_1, id), lambda(functor_2, id) FROM test_table;
WITH (path = 'test1') OR match(path, 'test2') OR (match(path, 'test3') AND match(path, 'test2')) OR match(path, 'test4') OR (path = 'test5') OR (path = 'test6') AS alias_in_error SELECT count(1) FROM test_bug_optimization WHERE alias_in_error;
WITH (range(0, number % 10), range(0, number % 10))::Map(UInt64, UInt64) AS m1, (range(0, number % 10, 2), arrayMap(x -> x * x, range(0, number % 10, 2)))::Map(UInt64, UInt64) AS m2 SELECT DISTINCT mapUpdate(m1, m2) FROM numbers (100000);
WITH (SELECT '111111111111111111111111111111111111111'::UInt128) AS v SELECT sum(x), max(v) FROM test;
with (select 5 except select 1) as a select a except select 5;
with (select count() > 0 from remote('127.2', system.settings)) as s select s;
with (select currentDatabase()) as key_signed select *, ignore(key_signed) from cluster(test_cluster_two_shards, currentDatabase(), data_01756_signed, key) where key in (-1, -2);
with (select groupArray(id) from bbb) as ids select * from aaa where has(ids, id) order by id;
WITH (SELECT pow(two, 1) GROUP BY GROUPING SETS ((pow(1, 9)))) AS four SELECT 2 AS two GROUP BY pow(1, two);
with (select pow(two,2)) as four select pow(four, 2), 2 as two, pow(two, 2);
WITH (SELECT stochasticLinearRegressionState(1, 2, 3)) AS model SELECT evalMLMethod(model, toFloat64(1), toFloat64(1));
with (select sumState(1)) as s select sumMerge(s);
with (select sumState(number) from (select * from system.numbers limit 10)) as s select sumMerge(s);
with (select uuid from system.tables where database = currentDatabase() and table = 'data_02491') as table_uuid_ select table_uuid != toUUIDOrDefault(Null), event_type, merge_reason, part_name from system.part_log where database = currentDatabase() and table = 'data_02491' and table_uuid = table_uuid_ order by event_time_microseconds;
WITH (tup || (3, 4)) AS res SELECT res, res.1, res.2, res.3, res.4 FROM t_02833;
WITH (tup || tup) AS res SELECT res, res.1, res.2, res.3, res.4 FROM t_02833;
WITH - INTERVAL 1 HOUR - INTERVAL 1 SECOND - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH - INTERVAL 1 SECOND - INTERVAL 1 HOUR - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH - INTERVAL 1 SECOND - INTERVAL 1 SECOND - INTERVAL 1 HOUR as expr SELECT expr, toTypeName(expr);
WITH - INTERVAL 1 SECOND - INTERVAL 1 SECOND - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH 0.01 AS threshold SELECT 'unknown runtime exceptions', greatest(coalesce(sum(length(message_format_string) = 0) / countOrNull(), 0) as v, threshold), v <= threshold ? [] : (SELECT groupArray((message, c)) FROM ( SELECT message, count() as c FROM logs WHERE length(message_format_string) = 0 AND (message like '%DB::Exception%' or message like '%Coordination::Exception%') AND message not like '% Received from %' and message not like '%(SYNTAX_ERROR)%' GROUP BY message ORDER BY c LIMIT 10 )) FROM logs WHERE (message like '%DB::Exception%' or message like '%Coordination::Exception%') AND message not like '% Received from %' and message not like '%(SYNTAX_ERROR)%';
with 1 as x select * from (select x);
with 1 as x select *, x from (with 2 as x select x as y);
with 1 as x select x union all select x;
with 1 as x select x;
WITH 10.125 AS a, 2.5 AS b SELECT a % b, -a % b, a % -b, -a % -b;
WITH 10.125 AS a, 2.5 AS b SELECT a MOD b, -a MOD b, a MOD -b, -a MOD -b;
with 123 as pid select a.col1, sum(a.col2) as summ from table1 a prewhere (pid is null or a.col2 = pid) group by a.col1;
WITH 2 AS `b.c`, [4, 5] AS a, 6 AS u, 3 AS v, 2 AS d, TRUE AS e, 1 AS f, 0 AS g, 2 AS h, 'Hello' AS i, 'World' AS j, 'hi' AS w, NULL AS k, (1, 2) AS l, 2 AS m, 3 AS n, [] AS o, [1] AS p, 1 AS q, q AS r, 1 AS s, 1 AS t SELECT INTERVAL CASE CASE WHEN -a[`b.c`] * u DIV v + d IS NOT NULL AND e OR f BETWEEN g AND h THEN i ELSE j END WHEN w THEN k END || [l, (m, n)] MINUTE IS NULL OR o::Array(INT) = p <> q < r > s != t AS upyachka;
with 3 as "1" select 1, "1";
with 5 as q1, x as (select number+100 as b, number as a from numbers(10) where number > q1) select * from x;
WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab ORDER BY L2Distance(vec, reference_vec) LIMIT 3;
WITH [1, 2, 3] AS constant_array SELECT id, value, value_1 FROM test_table ARRAY JOIN constant_array AS value_1;
WITH [1, 2, NULL] AS arr SELECT arr.null;
WITH [1.0, 0.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab ORDER BY L2Distance(vec, reference_vec) LIMIT 1;
WITH [3,4,5] AS x SELECT x[1]::Int32;
WITH [9000.0, 0.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab ORDER BY L2Distance(vec, reference_vec) LIMIT 1;
WITH [[1, 2], [], [3]] AS arr SELECT arr.size0, arr.size1;
WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM a as l, b as r;
WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM b as l, a as r;
WITH A as (SELECT rowNumberInAllBlocks() R,addDays(toDate('2021-05-18'), R) TVV from numbers(5)), B as (SELECT rowNumberInAllBlocks() R,toDateTime(NULL) TVV from numbers(1)) SELECT joinGet('DATE_INFO_DICT', 'SHAMSI', toDate(A.TVV) ) TV1, substr(TV1, 3, 8) || ' : ' || toString(1) TV_CHAR_1 from A LEFT JOIN B USING (R) ORDER BY TV1;
WITH a AS (SELECT t1.number AS n1, t2.number AS n2 FROM numbers(1) AS t1, numbers(1) AS t2), b AS (SELECT sum(n1) AS s FROM a) SELECT * FROM b AS l, a AS r;
WITH a as b SELECT 1 as a, b;
WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%test cpu time query profiler%' AND query NOT LIKE '%system%' ORDER BY event_time DESC LIMIT 1) AND symbol LIKE '%Source%';
WITH arrayJoin(['::192.168.100.1', '::192.168.103.255']) as addr, arrayJoin(['::192.168.100.0/118', '::192.168.100.0/120']) as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);
WITH arrayJoin(['::192.168.99.255', '::192.168.100.1', '::192.168.103.255', '::192.168.104.0']) as addr, '::192.168.100.0/118' as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);
WITH arrayJoin(['a', 'a', 'b', 'b']) AS field SELECT field, count() OVER (PARTITION BY field) ORDER BY field ASC LIMIT 1;
WITH arrayJoin(['a', 'b']) AS z SELECT z, sumMergeForEach(x) AS x FROM ( SELECT sumStateForEach([1., 1.1, 1.1300175]) AS x FROM remote('127.0.0.{1,2}', system.one) ) GROUP BY z ORDER BY z;
WITH arrayJoin(range(2)) AS delta SELECT toDate(time) + toIntervalDay(delta) AS dt FROM ( SELECT toDateTime('2020.11.12 19:02:04') AS time ) ORDER BY dt ASC;
WITH b AS bb SELECT bb FROM t2 WHERE a IN (SELECT a FROM t1);
with c as ( select 1 ID, toDate('2023-06-24') dt, 0 p ) select multiIf(t.ID = 1, formatRowNoNewline('JSONEachRow', dd), '') AS params from (select ID, case when p = 0 then toString(date_add(hour, p, dt)) else '2022-01-01' end as dd from c) t;
with c as ( select 1 ID, toDate('2023-06-24') dt, 0 p ) select multiIf(t.ID = 1, formatRowNoNewline('JSONEachRow', dd), '') AS params, dd from (select ID, case when p = 0 then toString(date_add(hour, p, dt)) else '2022-01-01' end as dd from c) t;
WITH CAST('text' as LowCardinality(String)) as input, 'aes-256-ofb' as mode SELECT toTypeName(input), hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test LIMIT 1;
WITH CAST('text' as Nullable(String)) as input, 'aes-256-ofb' as mode SELECT toTypeName(input), hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test LIMIT 1;
WITH CAST(NULL as Nullable(String)) as input, 'aes-256-ofb' as mode SELECT toTypeName(input), hex(aes_encrypt_mysql(mode, input, key32,iv)) FROM encryption_test LIMIT 1;
WITH CAST(round(sqrt(number)) % 4 AS Enum('' = 0, 'hello' = 1, 'world' = 2, 'test' = 3)) AS x SELECT topK(10)(x) FROM numbers(1000);
WITH cast(tuple(1), 'Tuple (value UInt64)') AS compound_value SELECT arrayMap(x -> compound_value.*, [1,2,3]);
WITH cast(tuple(1), 'Tuple (value UInt64)') AS compound_value SELECT id, test_table.* APPLY x -> compound_value.* FROM test_table;
WITH cast(tuple(1, 1), 'Tuple (value_1 UInt64, value_2 UInt64)') AS compound_value SELECT arrayMap(x -> compound_value.*, [1,2,3]);
WITH cast(tuple(1, 1), 'Tuple (value_1 UInt64, value_2 UInt64)') AS compound_value SELECT id, test_table.* APPLY x -> compound_value.* FROM test_table;
WITH concat('1,2,"[1,2,3]",','"[[\'abc\'], [], [\'d\', \'e\']]"') AS format_value SELECT c1, c2, c3, c4 FROM format('CSV', format_value);
WITH concat(addressToLine(arrayJoin(trace) AS addr), '#') AS symbol SELECT count() > 7 FROM trace_log AS t WHERE (query_id = ( SELECT [NULL, NULL, NULL, NULL, 0.00009999999747378752, NULL, NULL, NULL, NULL, NULL], query_id FROM system.query_log WHERE current_database = currentDatabase() AND (query LIKE '%test cpu time query profiler%') AND (query NOT LIKE '%system%') ORDER BY event_time DESC LIMIT 1 )) AND (symbol LIKE '%Source%');
WITH cte_0 AS (select subq_0.c6 as c2, case when 0<>0 then ((select c_zeij from t_q1ht4gq_5 order by c_zeij limit 1 offset 1) + subq_0.c4) else ((select c_zeij from t_q1ht4gq_5 order by c_zeij limit 1 offset 1) + subq_0.c4) end as c4 from (select ref_0.c_nkt as c4, ref_0.c_nkt as c6 from t_q1ht4gq_5 as ref_0 ) as subq_0 ) select ref_12.c_zeij as c3 from t_q1ht4gq_5 as ref_12 where (ref_12.c_jz not in ( select ref_14.c_mc2 as c0 from t_q1ht4gq_5 as ref_14 cross join cte_0 as ref_15 where ref_15.c4 > ref_15.c2));
WITH cte_subquery AS (SELECT 1) SELECT * FROM cte_subquery;
WITH cte_test_table_for_in AS (SELECT id FROM test_table_for_in) SELECT id, value FROM test_table WHERE id IN (SELECT id FROM cte_test_table_for_in UNION DISTINCT SELECT id FROM cte_test_table_for_in);
WITH cte_test_table_for_in AS (SELECT id FROM test_table_for_in) SELECT id, value FROM test_table WHERE id IN cte_test_table_for_in;
WITH dummy AS myName SELECT myName + 1 FROM system.one;
with groupUniqArrayArraySimpleState([number]) as c select toTypeName(c), c from numbers(1);
WITH h3ToGeo(arrayJoin([579205133326352383,589753847883235327,594082350283882495])) AS p SELECT round(p.1, 2), round(p.2, 2);
WITH h3ToGeo(h3_index) AS p SELECT round(p.1, 3), round(p.2, 3) FROM h3_indexes ORDER BY h3_index;
with i as k select * from alias_key_condition where k = (select i from alias_key_condition where i = 3);
WITH id AS value SELECT value FROM test_table;
WITH INTERVAL 1 HOUR + INTERVAL 1 SECOND + INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH IPv4CIDRToRange(ip, cidr) as ip_range SELECT ip, cidr, IPv4NumToString(tupleElement(ip_range, 1)), ip_range FROM ipv4_range;
WITH IPv4CIDRToRange(toIPv4('192.168.0.0'), 8) as ip_range SELECT COUNT(*) FROM ipv4_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
with it as ( select * from numbers(1) ) select it.number, i.number from it as i;
WITH lambda(lambda(plus(x, x, -1)), tuple(x), x + 2147483646) AS lambda, x -> plus(lambda(1), x, 2) AS lambda SELECT 1048576, lambda(1048576);
WITH mannWhitneyUTest('two-sided')(1, right) AS pair SELECT roundBankers(pair.1, 16) AS t_stat, roundBankers(pair.2, 16) AS p_value FROM mann_whitney_test;
WITH mannWhitneyUTest('two-sided', 1)(left, right) as pair SELECT roundBankers(pair.1, 16) as t_stat, roundBankers(pair.2, 16) as p_value from mann_whitney_test;
WITH mannWhitneyUTest(left, right) AS pair SELECT roundBankers(pair.1, 16) as t_stat, roundBankers(pair.2, 16) as p_value from mann_whitney_test;
WITH map('a', 2, 'b', NULL) AS m SELECT m[materialize(toNullable('a'))], m[materialize(toNullable('b'))], m[materialize(toNullable('c'))];
WITH map('a', 2, 'b', NULL) AS m SELECT m[toNullable('a')], m[toNullable('b')], m[toNullable('c')];
WITH map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64)) AS m SELECT m.keys, m.values, m.values.*;
WITH map('foo', 1, 'bar', 2) AS m SELECT m.keys, m.values;
WITH map(1, 'Test') AS value, 'Array(Tuple(UInt64, String))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, 'val1', 2, 'val2') AS map SELECT CAST(map, 'Array(Tuple(k UInt32, v String))') AS c, toTypeName(c);
WITH map(1, 2, 3, 4) AS m SELECT m[3];
WITH map(1, 2, 3, NULL) AS m SELECT m[materialize(toNullable(1))], m[materialize(toNullable(2))], m[materialize(toNullable(3))];
WITH map(1, 2, 3, NULL) AS m SELECT m[toNullable(1)], m[toNullable(2)], m[toNullable(3)];
WITH map(1, ['1', '2', '3']) AS value, 'Array(Tuple(UInt64, Array(UInt64)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, [1, 2, 3]) AS value, 'Array(Tuple(UInt64, Array(String)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, map(1, '1234')) AS value, 'Array(Tuple(UInt64, Array(Tuple(UInt64, String))))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, map(1, '1234')) as value, 'Array(Tuple(UInt64, Array(Tuple(UInt64, UInt64))))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, map(1, '1234')) AS value, 'Array(Tuple(UInt64, Map(UInt64, String)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, map(1, '1234')) AS value, 'Array(Tuple(UInt64, Map(UInt64, UInt64)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH materialize(('a', 'b')::Tuple(c1 String, c2 String)) AS t SELECT t.c1, t.c2;
WITH materialize((1, ('a', 'b'))::Tuple(c1 UInt64, t1 Tuple(c1 String, c2 String))) AS t SELECT t.c1, t.t1.c1, t.t1.c2;
WITH materialize([1, 2, 3]) AS arr SELECT arr.size0;
WITH materialize([1, 2, NULL]) AS arr SELECT arr.null;
WITH materialize([[1, 2], [], [3]]) AS arr SELECT arr.size0, arr.size1;
WITH materialize(CAST(NULL, 'Nullable(Float64)')) AS test SELECT test, toTypeName(test), IF(test = 0, 1, 0);
WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m['a'], m['b'], m['c'];
WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[materialize('a')], m[materialize('b')], m[materialize('c')];
WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[materialize(toNullable('a'))], m[materialize(toNullable('b'))], m[materialize(toNullable('c'))];
WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[materialize(1)], m[materialize(2)], m[materialize(3)];
WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[materialize(toNullable(1))], m[materialize(toNullable(2))], m[materialize(toNullable(3))];
WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[toNullable(1)], m[toNullable(2)], m[toNullable(3)];
with maxMapSimpleState(([number], [number])) as c select toTypeName(c), c from numbers(1);
with maxSimpleState(number) as c select toTypeName(c), c from numbers(1);
with minMapSimpleState(([number], [number])) as c select toTypeName(c), c from numbers(1);
WITH minSampleSizeContinous(0.0, 10.0, 0.05, 0.8, 0.05) AS res SELECT 'continous const 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);
WITH minSampleSizeContinous(20, 10.0, 0.05, 0.8, 0.05) AS res SELECT 'continous const 3', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);
WITH minSimpleState(value) AS c SELECT toTypeName(c), c FROM ( SELECT NULL as value UNION ALL SELECT 1 as value );
with NULL as pid select a.col1, sum(a.col2) as summ from table1 a prewhere (pid is null or a.col2 = pid) group by a.col1;
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(1000);
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM remote('127.0.0.{1..10}', numbers_mt(10000000));
WITH number * 2 AS square_number SELECT number, square_number FROM numbers_indexed WHERE number = 999;
with number + 1 as col select quantilesGK(10000, 0.25, 0.5, 0.75)(col), count(col), quantilesGK(10000, 0.0, 1.0)(col), sum(col) from numbers(1000);
WITH number - 180 AS lon SELECT lon, round(greatCircleAngle(0, 0, lon, 0) - abs(lon) AS err, 2) FROM numbers(360) WHERE abs(err) > 0.01;
WITH number - 90 AS lat SELECT DISTINCT greatCircleAngle(0, 0, 0, lat) = abs(lat) FROM numbers(180);
WITH number AS k SELECT k FROM system.numbers LIMIT 10;
WITH number DIV 50 AS k, toUInt32(number % 50) AS value SELECT k, sparkbar(50, 0, 99)(number, value) FROM numbers(100) GROUP BY k ORDER BY k;
with pow(2,2) as four select pow(four, 2), 2 as two, pow(two, 2);
WITH pow(NULL, 256) AS four SELECT NULL AS two GROUP BY GROUPING SETS ((pow(two, 65536)));
with res as (select first_col from (select first_col, second_col as total from tp2 order by 2 desc) limit 1) select * from res;
with rhs_ as (select * from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one))) select lhs.d2 from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one)) lhs global join rhs_ rhs using (d1) order by rhs.d2 settings joined_subquery_requires_alias=0;
WITH round(exp(number), 6) AS x, toUInt64(x) AS y, toInt32(min2(x, 2147483647)) AS z SELECT formatReadableQuantity(x), formatReadableQuantity(y), formatReadableQuantity(z) FROM system.numbers LIMIT 45;
WITH splitByChar('_', _file)[3]::UInt64 AS num SELECT count(), min(num), max(num) FROM s3(s3_conn, filename = 'test_02495_*', format = Parquet) WHERE num >= 5;
WITH splitByChar('_', part_name) AS name_parts, name_parts[2]::UInt64 AS min_block, name_parts[3]::UInt64 AS max_block SELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log WHERE database = currentDatabase() AND table = 't_compact_vertical_merge' AND min_block = 1 AND max_block = 3;
WITH subquery AS (SELECT 1 AS a) SELECT a FROM subquery;
WITH subquery AS (SELECT 1 AS a) SELECT subquery_alias.* APPLY toString FROM subquery AS subquery_alias;
WITH subquery AS (SELECT sum(number) FROM numbers(10)) SELECT (SELECT * FROM subquery);
WITH subquery AS (SELECT sum(number) FROM numbers(10)) SELECT * FROM subquery;
WITH subquery_1 AS (SELECT 1 AS a), subquery_2 AS (SELECT (1 + subquery_1.a) AS a FROM subquery_1) SELECT subquery_2.a FROM subquery_2;
WITH subquery_1 AS (SELECT 1 AS a), subquery_2 AS (SELECT 1 + subquery_1.a FROM subquery_1) SELECT * FROM subquery_2;
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' AS a, prefix || 'x' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' || prefix AS a, prefix || 'x' || prefix AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
with sumSimpleState(number) as c select toTypeName(c), c from numbers(1);
with sumWithOverflowSimpleState(number) as c select toTypeName(c), c from numbers(1);
with t + 1 as s select t from tab where s > '2020-01-01 01:01:01';
WITH t AS ( SELECT number AS n FROM numbers(10000) ) SELECT count(*) FROM t AS a WHERE a.n < 5000;
WITH t AS ( SELECT number AS n FROM numbers(10000) ) SELECT count(*) FROM t AS a WHERE t.n < 5000;
with t as s select t from tab where s > '2020-01-01 01:01:01';
WITH test1 AS (SELECT n FROM with_test order by n limit 100) SELECT max(n) FROM test1 where n=422;
WITH test1 AS (SELECT * FROM numbers(5)) SELECT * FROM test1;
WITH test1 AS (SELECT i + 1, j + 1 FROM test1) SELECT * FROM (SELECT * FROM test1);
WITH test1 AS (SELECT i + 1, j + 1 FROM test1) SELECT * FROM test1;
WITH test1 AS (SELECT i + 1, j + 1 FROM test1) SELECT toInt64(4) i, toInt64(5) j FROM numbers(3) WHERE (i, j) IN test1;
WITH test1 AS (SELECT n, null b FROM with_test where 1=1 and n = 42 order by n) SELECT max(n) FROM test1 where n=45;
WITH test1 AS (SELECT n, null b FROM with_test where b is null and n = 42) SELECT max(n) FROM test1 where n=45;
WITH test1 AS (SELECT n, null b FROM with_test where b is null or 1=1) SELECT max(n) FROM test1 where n=45;
WITH test_aliases AS (SELECT number FROM numbers(20)), alias2 AS (SELECT number FROM test_aliases) SELECT number FROM alias2 SETTINGS enable_global_with_statement = 0;
WITH test_aliases AS (SELECT number FROM numbers(20)), alias2 AS (SELECT number FROM test_aliases) SELECT number FROM alias2 SETTINGS enable_global_with_statement = 1;
WITH toDate('2000-01-01') + rand() % (30000) AS EventDate SELECT * FROM numbers(1000000) WHERE EventDate != toDate(concat(toString(toYear(EventDate)), '-', toString(toMonth(EventDate)), '-', toString(toDayOfMonth(EventDate))));
WITH toDate('2000-01-01') as a, toDateTime('2000-01-01', 'Asia/Istanbul') as b SELECT if(value, b, a) as result, toTypeName(result) FROM predicate_table;
with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon), toDayOfWeek(date_sun);
WITH toDateTime('2020-06-16 03:00:00') AS date_time SELECT date_time ORDER BY date_time ASC WITH FILL FROM toDateTime('2020-06-16 00:00:00') TO toDateTime('2020-06-16 10:00:00') STEP 1800;
WITH toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt SELECT dt, dateTimeToSnowflake(dt), materialize(dateTimeToSnowflake(dt));
WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%F %R:%S') != toString(t);
WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%Y-%m-%d %H:%i:%S') != toString(t);
WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%Y-%m-%d %R:%S') != toString(t);
WITH toDateTime(1509138000) + number * 300 AS t SELECT toHour(t, 'Asia/Kolkata') AS h, toString(toStartOfHour(t, 'Asia/Kolkata'), 'Asia/Kolkata') AS h_start FROM system.numbers LIMIT 12;
WITH toDateTime64('2019-09-16 19:20:11', 0, 'UTC') AS dt64 SELECT toStartOfSecond(dt64) AS res, toTypeName(res);
WITH toDateTime64('2019-09-16 19:20:11.123', 3, 'UTC') AS dt64 SELECT toStartOfSecond(dt64) AS res, toTypeName(res);
with toDateTime64('2023-01-01 00:00:00.000000001', 9, 'US/Eastern') as c select c+v1 as c_v1, c+v2 as c_v2, c+v3 as c_v3, date_diff(second, c, c_v1), date_diff(hour, c, c_v2), date_diff(second, c, c_v3) from saved_intervals_mgt;
with toDateTime64('2023-01-01 00:00:00.000000001', 9, 'US/Eastern') as c select c+v1 as c_v1, c+v2 as c_v2, c+v3 as c_v3, date_diff(second, c, c_v1), date_diff(hour, c, c_v2), date_diff(second, c, c_v3) from saved_intervals_tmp;
WITH toDateTime64('2023-11-11 11:11:11.1231', 4, 'UTC') AS dt64_4 SELECT dt64_4, snowflakeToDateTime64(dateTime64ToSnowflake(dt64_4), 'UTC');
WITH toIPv4('127.0.0.10') AS ip SELECT ip = 2130706442::UInt32, ip = 0::UInt32, ip < 2130706443::UInt32, ip > 2130706441::UInt32, ip <= 2130706442::UInt32, ip >= 2130706442::UInt32, ip != 2130706442::UInt32;
WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM agg WHERE ts > '2021-12-06 22:00:00' GROUP BY a ORDER BY v LIMIT 5;
WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM agg WHERE ts > '2021-12-06 22:00:00' GROUP BY toStartOfHour(ts), a ORDER BY v LIMIT 5;
WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM normal WHERE ts > '2021-12-06 22:00:00' GROUP BY a ORDER BY v LIMIT 5;
WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM normal WHERE ts > '2021-12-06 22:00:00' GROUP BY toStartOfHour(ts), a ORDER BY v LIMIT 5;
with toUInt64(id) as id_with select day, count(id_with) from test where day >= '2023-01-01' group by day limit 1000;
WITH tuple(3,4,5) AS x SELECT x.1::Int32;
WITH tuple(INTERVAL 1 SECOND) - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH value_1 as value_2, id_1 as id_2, id AS id_1, value AS value_1 SELECT id_2, value_2 FROM test_table;
with x + y as s select x, y from tab where s = 2;
WITH x -> * AS lambda SELECT lambda(1) FROM test_table;
WITH x -> * AS lambda SELECT lambda(1);
WITH x -> concat(concat(toString(x.id), '_'), x.value) AS lambda SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, lambda(value);
WITH x -> concat(concat(x.value_0_level_0, '_'), x.value_1_level_0) AS lambda SELECT lambda(value) FROM test_table_tuple;
WITH x -> plus(lambda(1), x) AS lambda SELECT lambda(1048576);
WITH x -> toString(id) AS lambda SELECT arrayMap(x -> arrayMap(y -> concat(lambda(x), '_', lambda(y)), [1,2,3]), [1,2,3]) FROM test_table;
WITH x -> toString(id) AS lambda SELECT arrayMap(x -> arrayMap(y -> lambda(y), [1,2,3]), [1,2,3]) FROM test_table;
WITH x -> toString(id) AS lambda SELECT arrayMap(x -> lambda(x), [1,2,3]) FROM test_table;
WITH x -> toString(x) AS lambda SELECT arrayMap(x -> arrayMap(y -> concat(lambda(x), '_', lambda(y)), [1,2,3]), [1,2,3]);
WITH x -> toString(x) AS lambda SELECT arrayMap(x -> lambda(x), [1,2,3]);
WITH x -> toString(x) AS lambda SELECT lambda(1), lambda(NULL), lambda([1,2,3]);
WITH x -> toString(x) AS lambda SELECT lambda(id), lambda(value) FROM test_table;
WITH x -> toString(x) AS lambda_1 SELECT arrayMap(lambda_1 AS lambda_2, [1,2,3]), arrayMap(lambda_2, ['1', '2', '3']);
WITH x -> toString(x) AS lambda_1, lambda_1 AS lambda_2, lambda_2 AS lambda_3 SELECT lambda_1(1), lambda_2(NULL), lambda_3([1,2,3]);
WITH x -> untuple(x) AS lambda SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, lambda(value);
WITH x -> x + 1 AS lambda SELECT arrayMap(lambda, [1,2,3]);
WITH x -> x + 1 AS lambda SELECT lambda(1);
WITH x -> x + 1 AS lambda SELECT lambda(id) FROM test_table;
WITH x -> x + 1 AS lambda, x -> x + 1 AS lambda SELECT lambda(1);
WITH x AS (SELECT * FROM cte1), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 2 = 1), w AS (SELECT * FROM y WHERE a > 333) SELECT max(a) FROM x JOIN y USING (a) WHERE a in (SELECT * FROM z) AND a <= (SELECT max(a) FROM w);
WITH x AS (SELECT * FROM cte1), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT count(a) FROM x left JOIN y USING (a) WHERE a in (SELECT * FROM z) AND a <= (SELECT max(a) FROM w);
WITH x AS (SELECT * FROM cte1), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT count(a) FROM x left JOIN y USING (a) WHERE a in (SELECT * FROM z);
WITH x AS (SELECT a-4000 a FROM cte1 AS t WHERE cte1.a >700), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT max(a), min(a), count(*) FROM y WHERE a <100;
WITH x AS (SELECT a-4000 a FROM cte1 t WHERE t.a >700), y AS (SELECT x.a a FROM x left JOIN cte1 USING (a)), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT max(a), min(a), count(*) FROM y WHERE a <100;
WITH x AS (SELECT a-4000 a FROM cte1 WHERE cte1.a >700), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT count(*) FROM x left JOIN y USING (a) WHERE a in (SELECT * FROM z);
WITH x AS (SELECT a-4000 a FROM cte1 WHERE cte1.a >700), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT max(a), min(a), count(*) FROM x WHERE a in (SELECT * FROM z) AND a <100;
WITH x AS (SELECT a-4000 a FROM cte1 WHERE cte1.a >700), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT max(a), min(a), count(*) FROM x WHERE a <100;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)) SELECT * FROM x JOIN y USING a ORDER BY x.a;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)) SELECT * FROM x left JOIN y USING a ORDER BY a;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)) SELECT * FROM x WHERE a in (SELECT a FROM y) ORDER BY a;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)), z AS (SELECT * FROM x WHERE a % 2), w AS (SELECT * FROM y WHERE a > 0) SELECT * FROM x JOIN y USING a WHERE a in (SELECT * FROM z) ORDER BY x.a;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)), z AS (SELECT * FROM x WHERE a % 2), w AS (SELECT * FROM y WHERE a > 0) SELECT a FROM x JOIN y USING a WHERE a in (SELECT * FROM z) AND a <= (SELECT max(a) FROM w) ORDER BY x.a;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)), z AS (SELECT * FROM x WHERE a % 2), w AS (SELECT * FROM y WHERE a > 0) SELECT max(a) FROM x JOIN y USING a WHERE a in (SELECT * FROM z) AND a > (SELECT min(a) FROM w);
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)), z AS (SELECT toUInt64(1) b) SELECT * FROM x JOIN y USING a WHERE a in (SELECT * FROM z);
/*
SELECT $$ value1 value2 value3 $$;
SELECT $$$$;
SELECT $$VALUE$$;
SELECT $\xc3\x28$'\xc3\x28'$\xc3\x28$;
SELECT $doc$$do$ $ doc$ $doc $ $doco$$doc$, $doc$$do$ $ doc$ $doc $ $doco$$doc$;
SELECT $doc$'\xc3\x28'$doc$;
SELECT $doc$'VALUE'$doc$;
SELECT $doc$VALUE$doc$;
SELECT $doc$ТЕСТ$doc$;
SELECT $doc$该类型的引擎$doc$;
SELECT $РАЗДЕЛИТЕЛЬ$VALUE$РАЗДЕЛИТЕЛЬ$;
SELECT $该类型的引擎$VALUE$该类型的引擎$;
select * from kql($$Customers | where FirstName !startswith 'Peter'$$);
select * from kql($$Customers | where FirstName !startswith_cs 'Peter'$$);
*/

-- SELECT netloc('<\'[%UzO');
-- known ambiguities
SELECT * FROM t ANY LEFT JOIN x  USING date, id ;
SELECT cast(id1 as UInt16) from t;
SELECT 1 FROM t GROUP BY CUBE(1) HAVING grouping(1);
SELECT not (acos(1) <> atan(1));
SELECT * FROM system.mutations WHERE NOT is_done;
select arrayMap( x -> x % 3 ? 1 : null, range(3)) as k from system.numbers_mt limit 10;